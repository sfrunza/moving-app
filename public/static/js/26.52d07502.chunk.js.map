{"version":3,"sources":["utils/getInitials.js","views/management/CustomerListView/Header.js","views/management/CustomerListView/Results.js","views/management/CustomerListView/index.js"],"names":["name","replace","split","slice","map","v","toUpperCase","join","useStyles","makeStyles","theme","root","action","marginBottom","spacing","marginLeft","actionIcon","marginRight","Header","className","rest","classes","Grid","clsx","container","justify","item","Breadcrumbs","separator","fontSize","aria-label","Link","variant","color","to","component","RouterLink","Typography","Button","SvgIcon","queryField","width","bulkOperations","position","bulkActions","paddingLeft","paddingRight","marginTop","zIndex","backgroundColor","palette","background","default","bulkAction","avatar","height","badge","right","Results","customers","jobs","useState","selectedCustomers","setSelectedCustomers","page","setPage","limit","setLimit","query","setQuery","isProspect","isReturning","acceptsMarketing","filters","filteredCustomers","filter","customer","matches","containsQuery","forEach","property","toLowerCase","includes","Object","keys","key","value","applyFilters","paginatedCustomers","applyPagination","enableBulkOperations","length","Card","Box","p","minHeight","display","alignItems","TextField","InputProps","startAdornment","InputAdornment","onChange","event","persist","target","placeholder","flexGrow","minWidth","Table","TableHead","TableRow","TableCell","padding","align","TableBody","number","job","user_id","id","isCustomerSelected","hover","selected","Checkbox","checked","customerId","prevSelected","Avatar","src","getInitials","first_name","last_name","Badge","badgeContent","email","phoneNumberString","match","formatPhoneNumber","phone","IconButton","TablePagination","count","onChangePage","newPage","onChangeRowsPerPage","rowsPerPage","rowsPerPageOptions","defaultProps","dark","paddingTop","paddingBottom","CustomerListView","isMountedRef","useIsMountedRef","setCustomers","setJobs","getCustomers","useCallback","axios","get","then","response","current","obj","data","users","getJobs","useEffect","Page","title","Container","maxWidth","mt"],"mappings":"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","file":"static/js/26.52d07502.chunk.js","sourcesContent":["export default (name = '') => name\n  .replace(/\\s+/, ' ')\n  .split(' ')\n  .slice(0, 2)\n  .map((v) => v && v[0].toUpperCase())\n  .join('');\n","import React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport {\n  Box,\n  Breadcrumbs,\n  Button,\n  Grid,\n  Link,\n  SvgIcon,\n  Typography,\n  makeStyles\n} from '@material-ui/core';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\nimport {\n  PlusCircle as PlusCircleIcon,\n  Download as DownloadIcon,\n  Upload as UploadIcon\n} from 'react-feather';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  action: {\n    marginBottom: theme.spacing(1),\n    '& + &': {\n      marginLeft: theme.spacing(1)\n    }\n  },\n  actionIcon: {\n    marginRight: theme.spacing(1)\n  }\n}));\n\nfunction Header({ className, ...rest }) {\n  const classes = useStyles();\n\n  return (\n    <Grid\n      className={clsx(classes.root, className)}\n      container\n      justify=\"space-between\"\n      spacing={3}\n      {...rest}\n    >\n      <Grid item>\n        <Breadcrumbs\n          separator={<NavigateNextIcon fontSize=\"small\" />}\n          aria-label=\"breadcrumb\"\n        >\n          <Link\n            variant=\"body1\"\n            color=\"inherit\"\n            to=\"/app\"\n            component={RouterLink}\n          >\n            Dashboard\n          </Link>\n          <Typography\n            variant=\"body1\"\n            color=\"textPrimary\"\n          >\n            Customers\n          </Typography>\n        </Breadcrumbs>\n        <Typography\n          variant=\"h3\"\n          color=\"textPrimary\"\n        >\n          All Customers\n        </Typography>\n      </Grid>\n      <Grid item>\n        <Button\n          color=\"secondary\"\n          variant=\"contained\"\n          className={classes.action}\n        >\n          <SvgIcon\n            fontSize=\"small\"\n            className={classes.actionIcon}\n          >\n            <PlusCircleIcon />\n          </SvgIcon>\n          New Customer\n        </Button>\n      </Grid>\n    </Grid>\n  );\n}\n\nHeader.propTypes = {\n  className: PropTypes.string\n};\n\nexport default Header;\n","/* eslint-disable max-len */\nimport React, { useState } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport {\n  Avatar,\n  Box,\n  Button,\n  Card,\n  Checkbox,\n  Divider,\n  IconButton,\n  InputAdornment,\n  Link,\n  SvgIcon,\n  Tab,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TablePagination,\n  TableRow,\n  Tabs,\n  TextField,\n  makeStyles,\n  Typography,\n  Badge,\n} from '@material-ui/core';\nimport {\n  Edit as EditIcon,\n  ArrowRight as ArrowRightIcon,\n  Search as SearchIcon\n} from 'react-feather';\nimport getInitials from 'src/utils/getInitials';\n\n\nfunction applyFilters(customers, query, filters) {\n  return customers.filter((customer) => {\n    let matches = true;\n\n    if (query) {\n      const properties = ['email', 'first_name', 'last_name'];\n      let containsQuery = false;\n\n      properties.forEach((property) => {\n        if (customer[property] != null && customer[property].toLowerCase().includes(query.toLowerCase())) {\n          containsQuery = true;\n        }\n      });\n\n      if (!containsQuery) {\n        matches = false;\n      }\n    }\n\n    Object.keys(filters).forEach((key) => {\n      const value = filters[key];\n\n      if (value && customer[key] !== value) {\n        matches = false;\n      }\n    });\n\n    return matches;\n  });\n}\n\nfunction applyPagination(customers, page, limit) {\n  return customers.slice(page * limit, page * limit + limit);\n}\n\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n\n  return 0;\n}\n\nfunction getComparator(order, orderBy) {\n  return order === 'desc'\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction applySort(customers, sort) {\n  const [orderBy, order] = sort.split('|');\n  const comparator = getComparator(order, orderBy);\n  const stabilizedThis = customers.map((el, index) => [el, index]);\n\n  stabilizedThis.sort((a, b) => {\n    // eslint-disable-next-line no-shadow\n    const order = comparator(a[0], b[0]);\n\n    if (order !== 0) return order;\n\n    return a[1] - b[1];\n  });\n\n  return stabilizedThis.map((el) => el[0]);\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  queryField: {\n    width: 500\n  },\n  bulkOperations: {\n    position: 'relative'\n  },\n  bulkActions: {\n    paddingLeft: 4,\n    paddingRight: 4,\n    marginTop: 6,\n    position: 'absolute',\n    width: '100%',\n    zIndex: 2,\n    backgroundColor: theme.palette.background.default\n  },\n  bulkAction: {\n    marginLeft: theme.spacing(2)\n  },\n  avatar: {\n    height: 42,\n    width: 42,\n    marginRight: theme.spacing(1)\n  },\n  badge: {\n    '& span': {\n      right: '-12px'\n    }\n  }\n}));\n\nfunction Results({ className, customers, jobs, ...rest }) {\n  const classes = useStyles();\n  const [currentTab, setCurrentTab] = useState('all');\n  const [selectedCustomers, setSelectedCustomers] = useState([]);\n  const [page, setPage] = useState(0);\n  const [limit, setLimit] = useState(10);\n  const [query, setQuery] = useState('');\n  const [filters, setFilters] = useState({\n    isProspect: null,\n    isReturning: null,\n    acceptsMarketing: null\n  });\n\n\n  const handleQueryChange = (event) => {\n    event.persist();\n    setQuery(event.target.value);\n  };\n\n  const handleSelectOneCustomer = (event, customerId) => {\n    if (!selectedCustomers.includes(customerId)) {\n      setSelectedCustomers([customerId]);\n    } else {\n      setSelectedCustomers((prevSelected) => prevSelected.filter((id) => id !== customerId));\n    }\n  };\n\n  const handlePageChange = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleLimitChange = (event) => {\n    setLimit(event.target.value);\n  };\n\n  const formatPhoneNumber = (phoneNumberString) => {\n    let cleaned = ('' + phoneNumberString).replace(/\\D/g, '')\n    let match = cleaned.match(/^(\\d{3})(\\d{3})(\\d{4})$/)\n    if (match) {\n      return '(' + match[1] + ') ' + match[2] + '-' + match[3]\n    }\n    return null\n  }\n\n  // Usually query is done on backend with indexing solutions\n  const filteredCustomers = applyFilters(customers, query, filters);\n  const paginatedCustomers = applyPagination(filteredCustomers, page, limit);\n  const enableBulkOperations = selectedCustomers.length > 0;\n  const selectedSomeCustomers = selectedCustomers.length > 0 && selectedCustomers.length < customers.length;\n  const selectedAllCustomers = selectedCustomers.length === customers.length;\n\n  return (\n    <Card\n      className={clsx(classes.root, className)}\n      {...rest}\n    >\n      <Box\n        p={2}\n        minHeight={56}\n        display=\"flex\"\n        alignItems=\"center\"\n      >\n        <TextField\n          className={classes.queryField}\n          InputProps={{\n            startAdornment: (\n              <InputAdornment position=\"start\">\n                <SvgIcon\n                  fontSize=\"small\"\n                  color=\"action\"\n                >\n                  <SearchIcon />\n                </SvgIcon>\n              </InputAdornment>\n            )\n          }}\n          onChange={handleQueryChange}\n          placeholder=\"Search by Name or Email\"\n          value={query}\n          variant=\"outlined\"\n        />\n        <Box flexGrow={1} />\n      </Box>\n      {enableBulkOperations && (\n        <div className={classes.bulkOperations}>\n          <div className={classes.bulkActions}>\n            <Button\n              variant=\"outlined\"\n              className={classes.bulkAction}\n              component={RouterLink}\n              to={`/app/customers/${selectedCustomers[0]}/edit`}\n            >\n              Edit\n            </Button>\n          </div>\n        </div>\n      )}\n      <PerfectScrollbar>\n        <Box minWidth={700}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell padding=\"checkbox\">\n                </TableCell>\n                <TableCell>\n                  Name\n                </TableCell>\n                <TableCell>\n                  Phone\n                </TableCell>\n                <TableCell>\n                  Last Move\n                </TableCell>\n                <TableCell align=\"right\">\n                  Actions\n                </TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {paginatedCustomers.map((customer) => {\n                let number = 0\n                let color = \"\"\n                jobs.map(job => {\n                  if (job.user_id === customer.id) {\n                    number = number + 1\n                  }\n                })\n\n                const isCustomerSelected = selectedCustomers.includes(customer.id);\n\n                return (\n                  <TableRow\n                    hover\n                    key={customer.id}\n                    selected={isCustomerSelected}\n                  >\n                    <TableCell padding=\"checkbox\">\n                      <Checkbox\n                        checked={isCustomerSelected}\n                        onChange={(event) => handleSelectOneCustomer(event, customer.id)}\n                        value={isCustomerSelected}\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <Box\n                        display=\"flex\"\n                        alignItems=\"center\"\n                      >\n                        <Avatar\n                          className={classes.avatar}\n                          src={customer.avatar}\n                        >\n                          {getInitials(customer.first_name + ' ' + customer.last_name)}\n                        </Avatar>\n                        <div>\n                          <Link\n                            color=\"inherit\"\n                            component={RouterLink}\n                            to={`/app/customers/${customer.id}`}\n                            variant=\"h6\"\n                          >\n                          {\n                            number === 1 ?\n                            (customer.first_name + \" \" + customer.last_name) :\n                            <Badge badgeContent={number} color='secondary' className={classes.badge}>\n                              {customer.first_name + \" \" + customer.last_name}\n                            </Badge>\n                          }\n                          </Link>\n                          <Typography\n                            variant=\"body2\"\n                            color=\"textSecondary\"\n                          >\n                            {customer.email}\n                          </Typography>\n                        </div>\n                      </Box>\n                    </TableCell>\n                    <TableCell>\n                      {formatPhoneNumber(customer.phone)}\n                    </TableCell>\n                    <TableCell>\n\n                    </TableCell>\n                    <TableCell align=\"right\">\n                      <IconButton\n                        component={RouterLink}\n                        to={`/app/customers/${customer.id}/edit`}\n                      >\n                        <SvgIcon fontSize=\"small\">\n                          <EditIcon />\n                        </SvgIcon>\n                      </IconButton>\n                      <IconButton\n                        component={RouterLink}\n                        to={`/app/customers/${customer.id}`}\n                      >\n                        <SvgIcon fontSize=\"small\">\n                          <ArrowRightIcon />\n                        </SvgIcon>\n                      </IconButton>\n                    </TableCell>\n                  </TableRow>\n                );\n              })}\n            </TableBody>\n          </Table>\n        </Box>\n      </PerfectScrollbar>\n      <TablePagination\n        component=\"div\"\n        count={filteredCustomers.length}\n        onChangePage={handlePageChange}\n        onChangeRowsPerPage={handleLimitChange}\n        page={page}\n        rowsPerPage={limit}\n        rowsPerPageOptions={[5, 10, 25]}\n      />\n    </Card>\n  );\n}\n\nResults.propTypes = {\n  className: PropTypes.string,\n  customers: PropTypes.array\n};\n\nResults.defaultProps = {\n  customers: []\n};\n\nexport default Results;\n","import React, {\n  useState,\n  useEffect,\n  useCallback\n} from 'react';\nimport {\n  Box,\n  Container,\n  makeStyles\n} from '@material-ui/core';\nimport axios from 'axios';\nimport Page from 'src/components/Page';\nimport useIsMountedRef from 'src/hooks/useIsMountedRef';\nimport Header from './Header';\nimport Results from './Results';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    backgroundColor: theme.palette.background.dark,\n    minHeight: '100%',\n    paddingTop: theme.spacing(3),\n    paddingBottom: theme.spacing(3)\n  }\n}));\n\nfunction CustomerListView() {\n  const classes = useStyles();\n  const isMountedRef = useIsMountedRef();\n  const [customers, setCustomers] = useState(null);\n  const [jobs, setJobs] = useState(null);\n\n  const getCustomers = useCallback(() => {\n    axios\n      .get('/api/v1/users.json')\n      .then((response) => {\n        if (isMountedRef.current) {\n          let obj = response.data.users\n          Object.keys(obj).forEach(key => {\n            if (!obj[key].customer) delete obj[key];\n          });\n          setCustomers(obj);\n        }\n      });\n  }, [isMountedRef]);\n\n  const getJobs = useCallback(() => {\n    axios\n      .get('/api/v1/jobs.json')\n      .then((response) => {\n        if (isMountedRef.current) {\n          let obj = response.data\n          setJobs(obj);\n        }\n      })\n  }, [isMountedRef]);\n\n  useEffect(() => {\n    getCustomers();\n    getJobs()\n  }, [getCustomers]);\n\n  if (!customers || !jobs) {\n    return null;\n  }\n\n  return (\n    <Page\n      className={classes.root}\n      title=\"Customer List\"\n    >\n      <Container maxWidth={false}>\n        <Header />\n        {customers && (\n          <Box mt={3}>\n            <Results customers={customers} jobs={jobs}/>\n          </Box>\n        )}\n      </Container>\n    </Page>\n  );\n}\n\nexport default CustomerListView;\n"],"sourceRoot":""}