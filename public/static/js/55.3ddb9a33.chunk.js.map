{"version":3,"sources":["views/chat/ChatView/Sidebar/Toolbar.js","views/chat/ChatView/Sidebar/ThreadList/ThreadItem.js","views/chat/ChatView/Sidebar/ThreadList/index.js","views/chat/ChatView/Sidebar/index.js","views/chat/ChatView/ThreadDetails/Toolbar.js","views/chat/ChatView/Message.js","views/chat/ChatView/MessageAdd.js","views/chat/ChatView/ThreadDetails/index.js","views/chat/ChatView/ThreadNew/Search.js","views/chat/ChatView/ThreadNew/index.js","views/chat/ChatView/index.js"],"names":["useStyles","makeStyles","theme","root","display","alignItems","height","paddingLeft","spacing","paddingRight","Toolbar","className","rest","classes","clsx","Typography","variant","color","Box","flexGrow","IconButton","SvgIcon","fontSize","component","RouterLink","to","active","boxShadow","palette","secondary","main","backgroundColor","action","avatar","width","unreadIndicator","marginTop","padding","minWidth","ThreadItem","thread","user","useSelector","state","account","contact","userId","contacts","chat","contactId","participantIds","filter","participantId","byId","contactSelector","id","lastMessage","messages","length","lastMessageInfo","senderId","contentType","body","ListItem","button","key","ListItemAvatar","Avatar","alt","src","ListItemText","primary","name","primaryTypographyProps","noWrap","secondaryTypographyProps","ml","flexDirection","unreadCount","Chip","size","label","defaultProps","searchContainer","search","borderRadius","background","dark","searchInput","marginLeft","contactAvatar","threadList","hideThreadList","ThreadList","location","useLocation","dispatch","useDispatch","threads","useState","searchText","setSearchText","displaySearchResults","setDisplaySearchResults","useEffect","getThreads","pathname","ClickAwayListener","onClickAway","Input","disableUnderline","onChange","event","persist","target","value","onFocus","placeholder","mt","List","allIds","toLowerCase","includes","filterContacts","map","username","allKeys","threadKey","byKey","drawerDesktopRoot","flexShrink","drawerDesktopPaper","position","drawerMobilePaper","drawerMobileBackdrop","Sidebar","containerRef","sidebarOpen","closeSidebar","content","options","suppressScrollX","Hidden","smDown","Drawer","paper","mdUp","open","onClose","style","zIndex","BackdropProps","ModalProps","container","current","default","menuButton","marginRight","onlineIndicator","moreRef","useRef","openMenu","setOpenMenu","onClick","openSidebar","isActive","OnlineIndicator","status","moment","lastActivity","fromNow","Paper","py","px","Tooltip","title","ref","Menu","anchorEl","keepMounted","elevation","MenuItem","ListItemIcon","marginBottom","image","cursor","maxWidth","Message","message","openedFile","setOpenedFile","sender","type","senderSelector","bgcolor","Link","justifyContent","createdAt","large","divider","fileInput","MessageAdd","disabled","onAdd","enqueueSnackbar","useSnackbar","fileInputRef","setBody","attachments","handleSend","a","addMessage","handleAttach","click","p","input","fullWidth","onKeyUp","keyCode","Divider","edge","ThreadDetails","useParams","history","useHistory","_contactId","push","threadSelector","messagesRef","getThread","markThreadAsSeen","_container","scrollTop","scrollHeight","PerfectScrollbar","Search","inputRef","filteredContactIds","autoFocus","Popper","placement","pb","pt","textAlign","gutterBottom","ThreadNew","overflow","ChatView","pageRef","getContacts","Page"],"mappings":"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","file":"static/js/55.3ddb9a33.chunk.js","sourcesContent":["import React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport {\n  Box,\n  IconButton,\n  SvgIcon,\n  Typography,\n  makeStyles\n} from '@material-ui/core';\nimport {\n  Settings as SettingsIcon,\n  Edit as EditIcon\n} from 'react-feather';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    alignItems: 'center',\n    height: 64,\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(2)\n  }\n}));\n\nfunction Toolbar({ className, ...rest }) {\n  const classes = useStyles();\n\n  return (\n    <div\n      className={clsx(classes.root, className)}\n      {...rest}\n    >\n      <Typography\n        variant=\"h3\"\n        color=\"textPrimary\"\n      >\n        Chats\n      </Typography>\n      <Box flexGrow={1} />\n      <IconButton>\n        <SvgIcon fontSize=\"small\">\n          <SettingsIcon />\n        </SvgIcon>\n      </IconButton>\n      <IconButton\n        component={RouterLink}\n        to=\"/app/chat/new\"\n      >\n        <SvgIcon fontSize=\"small\">\n          <EditIcon />\n        </SvgIcon>\n      </IconButton>\n    </div>\n  );\n}\n\nToolbar.propTypes = {\n  className: PropTypes.string\n};\n\nexport default Toolbar;\n","import React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport {\n  Avatar,\n  Box,\n  Chip,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  makeStyles\n} from '@material-ui/core';\nimport { useSelector } from 'react-redux';\n\nfunction contactSelector(state, thread, userId) {\n  const { contacts } = state.chat;\n  const contactId = thread.participantIds.filter((participantId) => participantId !== userId)[0];\n\n  return contacts.byId[contactId];\n}\n\nconst useStyles = makeStyles((theme) => ({\n  active: {\n    boxShadow: `inset 4px 0px 0px ${theme.palette.secondary.main}`,\n    backgroundColor: theme.palette.action.active\n  },\n  avatar: {\n    height: 40,\n    width: 40\n  },\n  unreadIndicator: {\n    marginTop: 2,\n    padding: 2,\n    height: 18,\n    minWidth: 18\n  }\n}));\n\nfunction ThreadItem({\n  active,\n  thread,\n  className,\n  ...rest\n}) {\n  const classes = useStyles();\n  const { user } = useSelector((state) => state.account);\n  const contact = useSelector((state) => contactSelector(state, thread, user.id));\n\n  const lastMessage = thread.messages[thread.messages.length - 1];\n  const lastMessageInfo = lastMessage ? `${lastMessage.senderId === user.id ? 'Me:' : ''} ${lastMessage.contentType === 'image' ? 'Sent a photo' : lastMessage.body}` : '';\n\n  return (\n    <ListItem\n      button\n      className={clsx(\n        {\n          [classes.active]: active\n        },\n        className\n      )}\n      component={RouterLink}\n      to={`/app/chat/${thread.key}`}\n      {...rest}\n    >\n      <ListItemAvatar>\n        <Avatar\n          alt=\"Person\"\n          className={classes.avatar}\n          src={contact.avatar}\n        />\n      </ListItemAvatar>\n      <ListItemText\n        primary={contact.name}\n        primaryTypographyProps={{\n          noWrap: true,\n          variant: 'h6',\n          color: 'textPrimary'\n        }}\n        secondary={lastMessageInfo}\n        secondaryTypographyProps={{\n          noWrap: true,\n          variant: 'body2',\n          color: 'textSecondary'\n        }}\n      />\n      <Box\n        ml={2}\n        display=\"flex\"\n        flexDirection=\"column\"\n        alignItems=\"flex-end\"\n      >\n        {thread.unreadCount > 0 && (\n          <Chip\n            className={classes.unreadIndicator}\n            color=\"secondary\"\n            size=\"small\"\n            label={thread.unreadCount}\n          />\n        )}\n      </Box>\n    </ListItem>\n  );\n}\n\nThreadItem.propTypes = {\n  active: PropTypes.bool,\n  className: PropTypes.string,\n  thread: PropTypes.object.isRequired\n};\n\nThreadItem.defaultProps = {\n  active: false,\n  className: ''\n};\n\nexport default ThreadItem;\n","import React, {\n  useState,\n  useEffect\n} from 'react';\nimport {\n  Link as RouterLink,\n  useLocation\n} from 'react-router-dom';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport {\n  useDispatch,\n  useSelector\n} from 'react-redux';\nimport { getThreads } from 'src/actions/chatActions';\nimport {\n  Avatar,\n  Box,\n  ClickAwayListener,\n  Input,\n  SvgIcon,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemAvatar,\n  Typography,\n  makeStyles\n} from '@material-ui/core';\nimport { Search as SearchIcon } from 'react-feather';\nimport ThreadItem from './ThreadItem';\n\nfunction filterContacts(contacts, searchText) {\n  if (!searchText) {\n    return contacts.allIds;\n  }\n\n  return contacts.allIds.filter(\n    (contactId) => contacts.byId[contactId].name.toLowerCase().includes(searchText.toLowerCase())\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  searchContainer: {\n    paddingLeft: theme.spacing(1),\n    paddingRight: theme.spacing(1)\n  },\n  search: {\n    display: 'flex',\n    alignItems: 'center',\n    height: 44,\n    borderRadius: 22,\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(2),\n    backgroundColor: theme.palette.background.dark\n  },\n  searchInput: {\n    flexGrow: 1,\n    marginLeft: theme.spacing(1)\n  },\n  contactAvatar: {\n    height: 32,\n    width: 32\n  },\n  threadList: {},\n  hideThreadList: {\n    display: 'none'\n  }\n}));\n\nfunction ThreadList({ className, ...rest }) {\n  const classes = useStyles();\n  const location = useLocation();\n  const dispatch = useDispatch();\n  const { threads, contacts } = useSelector((state) => state.chat);\n  const [searchText, setSearchText] = useState('');\n  const [displaySearchResults, setDisplaySearchResults] = useState(false);\n\n  const handleSearchFocus = (event) => {\n    event.persist();\n    setDisplaySearchResults(true);\n  };\n\n  const handleSearchChange = (event) => {\n    event.persist();\n    setSearchText(event.target.value);\n  };\n\n  const handleSearchClickAway = () => {\n    if (displaySearchResults) {\n      setSearchText('');\n      setDisplaySearchResults(false);\n    }\n  };\n\n  useEffect(() => {\n    dispatch(getThreads());\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (displaySearchResults) {\n      setDisplaySearchResults(false);\n    }\n    // eslint-disable-next-line\n  }, [location.pathname]);\n\n  return (\n    <div\n      className={clsx(classes.root, className)}\n      {...rest}\n    >\n      <ClickAwayListener onClickAway={handleSearchClickAway}>\n        <div className={classes.searchContainer}>\n          <div className={classes.search}>\n            <SvgIcon\n              fontSize=\"small\"\n              color=\"action\"\n            >\n              <SearchIcon />\n            </SvgIcon>\n            <Input\n              className={classes.searchInput}\n              disableUnderline\n              onChange={handleSearchChange}\n              onFocus={handleSearchFocus}\n              placeholder=\"Search contacts\"\n              value={searchText}\n            />\n          </div>\n          {displaySearchResults && (\n          <Box mt={2}>\n            <Typography\n              variant=\"h6\"\n              color=\"textSecondary\"\n            >\n              Contacts\n            </Typography>\n            <List>\n              {filterContacts(contacts, searchText).map((contactId) => {\n                const contact = contacts.byId[contactId];\n\n                return (\n                  <ListItem\n                    button\n                    component={RouterLink}\n                    key={contact.id}\n                    to={`/app/chat/${contact.username}`}\n                  >\n                    <ListItemAvatar>\n                      <Avatar\n                        src={contact.avatar}\n                        className={classes.contactAvatar}\n                      />\n                    </ListItemAvatar>\n                    <ListItemText\n                      primary={contact.name}\n                      primaryTypographyProps={{\n                        noWrap: true,\n                        variant: 'h6',\n                        color: 'textPrimary'\n                      }}\n                    />\n                  </ListItem>\n                );\n              })}\n            </List>\n          </Box>\n          )}\n        </div>\n      </ClickAwayListener>\n      <List className={clsx(classes.threadList,\n        { [classes.hideThreadList]: displaySearchResults })}\n      >\n        {threads.allKeys.map((threadKey) => (\n          <ThreadItem\n            key={threadKey}\n            thread={threads.byKey[threadKey]}\n          />\n        ))}\n      </List>\n    </div>\n  );\n}\n\nThreadList.propTypes = {\n  className: PropTypes.string\n};\n\nexport default ThreadList;\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useLocation } from 'react-router';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport {\n  useDispatch,\n  useSelector\n} from 'react-redux';\nimport {\n  Drawer,\n  Hidden,\n  makeStyles\n} from '@material-ui/core';\nimport { closeSidebar } from 'src/actions/chatActions';\nimport Toolbar from './Toolbar';\nimport ThreadList from './ThreadList';\n\nconst useStyles = makeStyles(() => ({\n  drawerDesktopRoot: {\n    width: 280,\n    flexShrink: 0\n  },\n  drawerDesktopPaper: {\n    position: 'relative'\n  },\n  drawerMobilePaper: {\n    position: 'relative',\n    width: 280\n  },\n  drawerMobileBackdrop: {\n    position: 'absolute'\n  }\n}));\n\nfunction Sidebar({ containerRef }) {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const location = useLocation();\n  const { sidebarOpen } = useSelector((state) => state.chat);\n\n  const handleCloseSidebar = () => {\n    dispatch(closeSidebar());\n  };\n\n  useEffect(() => {\n    if (sidebarOpen) {\n      dispatch(closeSidebar());\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [location.pathname]);\n\n  const content = (\n    <div>\n      <Toolbar />\n      <PerfectScrollbar options={{ suppressScrollX: true }}>\n        <ThreadList />\n      </PerfectScrollbar>\n    </div>\n  );\n\n  return (\n    <>\n      <Hidden smDown>\n        <Drawer\n          variant=\"permanent\"\n          classes={{\n            root: classes.drawerDesktopRoot,\n            paper: classes.drawerDesktopPaper\n          }}\n        >\n          {content}\n        </Drawer>\n      </Hidden>\n      <Hidden mdUp>\n        <Drawer\n          variant=\"temporary\"\n          open={sidebarOpen}\n          onClose={handleCloseSidebar}\n          classes={{\n            paper: classes.drawerMobilePaper\n          }}\n          style={{ position: 'absolute', zIndex: 1200 }}\n          BackdropProps={{ classes: { root: classes.drawerMobileBackdrop } }}\n          ModalProps={{ container: () => containerRef.current }}\n        >\n          {content}\n        </Drawer>\n      </Hidden>\n    </>\n  );\n}\n\nSidebar.propTypes = {\n  containerRef: PropTypes.any\n};\n\nexport default Sidebar;\n","import React, { useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport moment from 'moment';\nimport {\n  useSelector,\n  useDispatch\n} from 'react-redux';\nimport {\n  Avatar,\n  Box,\n  Hidden,\n  IconButton,\n  Input,\n  ListItemIcon,\n  ListItemText,\n  Menu,\n  MenuItem,\n  Paper,\n  Tooltip,\n  Typography,\n  makeStyles,\n  SvgIcon\n} from '@material-ui/core';\nimport {\n  Slash as SlashIcon,\n  Menu as MenuIcon,\n  MoreVertical as MoreIcon,\n  Search as SearchIcon,\n  Trash as TrashIcon,\n  Archive as ArchiveIcon,\n  BellOff as BellOffIcon\n} from 'react-feather';\nimport OnlineIndicator from 'src/components/OnlineIndicator';\nimport { openSidebar } from 'src/actions/chatActions';\n\nfunction contactSelector(state, participantIds) {\n  const { contacts } = state.chat;\n  const { user } = state.account;\n\n  // In most apps one thread can have more than two participants\n  // We could display all participants, but for now we only select one\n  const contactId = participantIds.filter((participantId) => participantId !== user.id)[0];\n\n  return contacts.byId[contactId];\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    backgroundColor: theme.palette.background.default,\n    height: 64,\n    flexShrink: 0,\n    display: 'flex',\n    alignItems: 'center',\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(2)\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  },\n  onlineIndicator: {\n    marginRight: theme.spacing(1)\n  },\n  searchInput: {\n    marginLeft: theme.spacing(2),\n    flexGrow: 1\n  }\n}));\n\nfunction Toolbar({\n  className,\n  thread,\n  ...rest\n}) {\n  const classes = useStyles();\n  const moreRef = useRef(null);\n  const dispatch = useDispatch();\n  const [openMenu, setOpenMenu] = useState(false);\n  const contact = useSelector((state) => contactSelector(state, thread.participantIds));\n\n  const handleOpenSidebar = () => {\n    dispatch(openSidebar());\n  };\n\n  const handleMenuOpen = () => {\n    setOpenMenu(true);\n  };\n\n  const handleMenuClose = () => {\n    setOpenMenu(false);\n  };\n\n  return (\n    <div\n      className={clsx(classes.root, className)}\n      {...rest}\n    >\n      <Hidden mdUp>\n        <IconButton\n          className={classes.menuButton}\n          onClick={handleOpenSidebar}\n        >\n          <SvgIcon fontSize=\"small\">\n            <MenuIcon />\n          </SvgIcon>\n        </IconButton>\n      </Hidden>\n      {contact && (\n        <Box\n          display=\"flex\"\n          alignItems=\"center\"\n        >\n          <Avatar src={contact.avatar} />\n          <Box ml={1}>\n            <Typography\n              variant=\"h6\"\n              color=\"textPrimary\"\n            >\n              {contact.name}\n            </Typography>\n            <Box\n              display=\"flex\"\n              alignItems=\"center\"\n            >\n              {contact.isActive ? (\n                <>\n                  <OnlineIndicator\n                    className={classes.onlineIndicator}\n                    status=\"online\"\n                    size=\"small\"\n                  />\n                  <Typography\n                    color=\"textSecondary\"\n                    variant=\"caption\"\n                  >\n                    Active now\n                  </Typography>\n                </>\n              ) : (\n                <Typography\n                  color=\"textSecondary\"\n                  variant=\"caption\"\n                >\n                  Active\n                  {' '}\n                  {moment(contact.lastActivity).fromNow()}\n                </Typography>\n              )}\n            </Box>\n          </Box>\n        </Box>\n      )}\n      <Box flexGrow={1} />\n      <Hidden smDown>\n        <Paper\n          component={Box}\n          display=\"flex\"\n          alignItems=\"center\"\n          variant=\"outlined\"\n          py={0.5}\n          px={1}\n        >\n          <SvgIcon\n            fontSize=\"small\"\n            color=\"action\"\n          >\n            <SearchIcon />\n          </SvgIcon>\n          <Input\n            className={classes.searchInput}\n            disableUnderline\n            placeholder=\"Search message\"\n          />\n        </Paper>\n      </Hidden>\n      <Tooltip title=\"More options\">\n        <IconButton\n          onClick={handleMenuOpen}\n          ref={moreRef}\n        >\n          <SvgIcon fontSize=\"small\">\n            <MoreIcon />\n          </SvgIcon>\n        </IconButton>\n      </Tooltip>\n      <Menu\n        anchorEl={moreRef.current}\n        keepMounted\n        elevation={1}\n        onClose={handleMenuClose}\n        open={openMenu}\n      >\n        <MenuItem>\n          <ListItemIcon>\n            <SvgIcon fontSize=\"small\">\n              <SlashIcon />\n            </SvgIcon>\n          </ListItemIcon>\n          <ListItemText primary=\"Block contact\" />\n        </MenuItem>\n        <MenuItem>\n          <ListItemIcon>\n            <SvgIcon fontSize=\"small\">\n              <TrashIcon />\n            </SvgIcon>\n          </ListItemIcon>\n          <ListItemText primary=\"Delete thread\" />\n        </MenuItem>\n        <MenuItem>\n          <ListItemIcon>\n            <SvgIcon fontSize=\"small\">\n              <ArchiveIcon />\n            </SvgIcon>\n          </ListItemIcon>\n          <ListItemText primary=\"Archive thread\" />\n        </MenuItem>\n        <MenuItem>\n          <ListItemIcon>\n            <SvgIcon fontSize=\"small\">\n              <BellOffIcon />\n            </SvgIcon>\n          </ListItemIcon>\n          <ListItemText primary=\"Mute notifications\" />\n        </MenuItem>\n      </Menu>\n    </div>\n  );\n}\n\nToolbar.propTypes = {\n  className: PropTypes.string,\n  thread: PropTypes.object.isRequired\n};\n\nexport default Toolbar;\n","import React, { useState } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport moment from 'moment';\nimport { Lightbox } from 'react-modal-image';\nimport {\n  Avatar,\n  Box,\n  Link,\n  Typography,\n  makeStyles\n} from '@material-ui/core';\n\nfunction senderSelector(state, senderId) {\n  const { user } = state.account;\n  const { contacts } = state.chat;\n\n  if (senderId !== user.id) {\n    const contact = contacts.byId[senderId];\n\n    return {\n      avatar: contact.avatar,\n      name: contact.name,\n      type: 'contact'\n    };\n  }\n\n  return {\n    avatar: user.avatar,\n    name: 'Me',\n    type: 'user'\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    marginBottom: theme.spacing(2),\n    display: 'flex'\n  },\n  avatar: {\n    height: 32,\n    width: 32\n  },\n  image: {\n    cursor: 'pointer',\n    height: 'auto',\n    maxWidth: '100%',\n    width: 380\n  }\n}));\n\nfunction Message({\n  className,\n  message,\n  ...rest\n}) {\n  const classes = useStyles();\n  const [openedFile, setOpenedFile] = useState(null);\n  const sender = useSelector((state) => senderSelector(state, message.senderId));\n\n  return (\n    <div\n      className={clsx(classes.root, className)}\n      {...rest}\n    >\n      <Box\n        display=\"flex\"\n        maxWidth={500}\n        ml={sender.type === 'user' ? 'auto' : 0}\n      >\n        <Avatar\n          className={classes.avatar}\n          src={sender.avatar}\n        />\n        <Box ml={2}>\n          <Box\n            bgcolor={sender.type === 'user' ? 'secondary.main' : 'background.default'}\n            color={sender.type === 'user' ? 'secondary.contrastText' : 'text.primary'}\n            py={1}\n            px={2}\n            borderRadius=\"borderRadius\"\n            boxShadow={1}\n          >\n            <Link\n              color=\"inherit\"\n              component={RouterLink}\n              to=\"#\"\n              variant=\"h6\"\n            >\n              {sender.name}\n            </Link>\n            <Box mt={1}>\n              {message.contentType === 'image' ? (\n                <Box\n                  mt={2}\n                  onClick={() => setOpenedFile(message.body)}\n                >\n                  <img\n                    alt=\"Attachment\"\n                    className={classes.image}\n                    src={message.body}\n                  />\n                </Box>\n              ) : (\n                <Typography\n                  color=\"inherit\"\n                  variant=\"body1\"\n                >\n                  {message.body}\n                </Typography>\n              )}\n            </Box>\n          </Box>\n          <Box\n            mt={1}\n            display=\"flex\"\n            justifyContent=\"flex-end\"\n          >\n            <Typography\n              noWrap\n              color=\"textSecondary\"\n              variant=\"caption\"\n            >\n              {moment(message.createdAt).fromNow()}\n            </Typography>\n          </Box>\n        </Box>\n      </Box>\n      {openedFile && (\n        <Lightbox\n          large={openedFile}\n          onClose={() => setOpenedFile(null)}\n        />\n      )}\n    </div>\n  );\n}\n\nMessage.propTypes = {\n  className: PropTypes.string,\n  message: PropTypes.object.isRequired\n};\n\nexport default Message;\n","import React, { useRef, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { useSnackbar } from 'notistack';\nimport {\n  Avatar,\n  Box,\n  Divider,\n  IconButton,\n  Input,\n  Paper,\n  SvgIcon,\n  Tooltip,\n  makeStyles\n} from '@material-ui/core';\nimport AddPhotoIcon from '@material-ui/icons/AddPhotoAlternate';\nimport AttachFileIcon from '@material-ui/icons/AttachFile';\nimport { Send as SendIcon } from 'react-feather';\nimport { addMessage } from 'src/actions/chatActions';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    backgroundColor: theme.palette.background.default,\n    display: 'flex',\n    alignItems: 'center',\n    padding: theme.spacing(1, 2)\n  },\n  divider: {\n    width: 1,\n    height: 24\n  },\n  fileInput: {\n    display: 'none'\n  }\n}));\n\nfunction MessageAdd({\n  className,\n  disabled,\n  thread,\n  onAdd,\n  ...rest\n}) {\n  const classes = useStyles();\n  const { user } = useSelector((state) => state.account);\n  const dispatch = useDispatch();\n  const { enqueueSnackbar } = useSnackbar();\n  const fileInputRef = useRef(null);\n  const [body, setBody] = useState('');\n  const attachments = [];\n\n  const handleChange = (event) => {\n    event.persist();\n    setBody(event.target.value);\n  };\n\n  const handleSend = async () => {\n    try {\n      if (!body || !thread) {\n        return;\n      }\n\n      await dispatch(addMessage({\n        userId: user.id,\n        threadKey: thread.key,\n        body,\n        attachments\n      }));\n      setBody('');\n      onAdd();\n    } catch (error) {\n      enqueueSnackbar('Ooops!', {\n        variant: 'error'\n      });\n    }\n  };\n\n  const handleKeyUp = (event) => {\n    if (event.keyCode === 13) {\n      handleSend();\n    }\n  };\n\n  const handleAttach = () => {\n    fileInputRef.current.click();\n  };\n\n  return (\n    <div\n      className={clsx(classes.root, className)}\n      {...rest}\n    >\n      <Avatar\n        alt=\"Person\"\n        src={user.avatar}\n      />\n      <Paper\n        variant=\"outlined\"\n        component={Box}\n        flexGrow={1}\n        ml={2}\n        p={1}\n      >\n        <Input\n          className={classes.input}\n          disableUnderline\n          fullWidth\n          value={body}\n          onChange={handleChange}\n          onKeyUp={handleKeyUp}\n          placeholder=\"Leave a message\"\n        />\n      </Paper>\n      <Tooltip title=\"Send\">\n        <span>\n          <IconButton\n            color=\"secondary\"\n            disabled={!body || disabled}\n            onClick={handleSend}\n          >\n            <SvgIcon fontSize=\"small\">\n              <SendIcon />\n            </SvgIcon>\n          </IconButton>\n        </span>\n      </Tooltip>\n      <Divider className={classes.divider} />\n      <Tooltip title=\"Attach photo\">\n        <span>\n          <IconButton\n            edge=\"end\"\n            onClick={handleAttach}\n            disabled={disabled}\n          >\n            <AddPhotoIcon />\n          </IconButton>\n        </span>\n      </Tooltip>\n      <Tooltip title=\"Attach file\">\n        <span>\n          <IconButton\n            edge=\"end\"\n            onClick={handleAttach}\n            disabled={disabled}\n          >\n            <AttachFileIcon />\n          </IconButton>\n        </span>\n      </Tooltip>\n      <input\n        className={classes.fileInput}\n        ref={fileInputRef}\n        type=\"file\"\n      />\n    </div>\n  );\n}\n\nMessageAdd.propTypes = {\n  className: PropTypes.string,\n  thread: PropTypes.object,\n  disabled: PropTypes.bool,\n  onAdd: PropTypes.func\n};\n\nMessageAdd.defaultProps = {\n  className: '',\n  disabled: false,\n  onAdd: () => {}\n};\n\nexport default MessageAdd;\n","import React, {\n  useEffect,\n  useRef\n} from 'react';\nimport {\n  useHistory,\n  useParams\n} from 'react-router';\nimport {\n  useSelector,\n  useDispatch\n} from 'react-redux';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport {\n  Box,\n  Divider,\n  makeStyles\n} from '@material-ui/core';\nimport {\n  markThreadAsSeen,\n  getThread\n} from 'src/actions/chatActions';\nimport Toolbar from './Toolbar';\nimport Message from '../Message';\nimport MessageAdd from '../MessageAdd';\n\nfunction threadSelector(state, threadKey, history) {\n  const { threads, contacts } = state.chat;\n  const { user } = state.account;\n  const thread = threads.byKey[threadKey];\n\n  // When starting a new thread, we don't have it in store\n  // So we can create a temporary new one where threadKey is the contact username\n  if (!thread) {\n    const contactId = contacts.allIds.filter(\n      // eslint-disable-next-line no-underscore-dangle\n      (_contactId) => contacts.byId[_contactId].username === threadKey\n    )[0];\n\n    if (!contactId) {\n      history.push('/app/chat/new');\n    }\n\n    return {\n      key: threadKey,\n      type: 'ONE_TO_ONE', // We might add GROUP type in future\n      participantIds: [contactId, user.id],\n      messages: []\n    };\n  }\n\n  return thread;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    display: 'flex',\n    flexDirection: 'column',\n    backgroundColor: theme.palette.background.dark\n  }\n}));\n\nfunction ThreadDetails() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const { threadKey } = useParams();\n  const history = useHistory();\n  const thread = useSelector((state) => threadSelector(state, threadKey, history));\n  const messagesRef = useRef(null);\n\n  function scrollMessagesToBottom() {\n    if (messagesRef.current) {\n      // eslint-disable-next-line no-underscore-dangle\n      messagesRef.current._container.scrollTop = messagesRef.current._container.scrollHeight;\n    }\n  }\n\n  useEffect(() => {\n    dispatch(getThread(threadKey));\n    dispatch(markThreadAsSeen(threadKey));\n  }, [dispatch, threadKey]);\n\n  useEffect(() => {\n    if (thread) {\n      scrollMessagesToBottom();\n    }\n    // eslint-disable-next-line\n  }, [thread.messages]);\n\n  if (!thread) {\n    return null;\n  }\n\n  return (\n    <div className={classes.root}>\n      <Toolbar thread={thread} />\n      <Divider />\n      <Box\n        flexGrow={1}\n        p={2}\n        ref={messagesRef}\n        component={PerfectScrollbar}\n        options={{ suppressScrollX: true }}\n      >\n        {thread.messages.length > 0 && thread.messages.map((message) => (\n          <Message\n            key={message.id}\n            message={message}\n          />\n        ))}\n      </Box>\n      <Divider />\n      <MessageAdd thread={thread} />\n    </div>\n  );\n}\n\nexport default ThreadDetails;\n","import React, {\n  useState,\n  useRef,\n  useEffect\n} from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {\n  Avatar,\n  Box,\n  ClickAwayListener,\n  Typography,\n  Input,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  Popper,\n  Paper,\n  makeStyles\n} from '@material-ui/core';\nimport clsx from 'clsx';\n\nfunction filterContacts(contacts, searchText) {\n  if (!searchText) {\n    return contacts.allIds;\n  }\n\n  return contacts.allIds.filter(\n    (contactId) => contacts.byId[contactId].name.toLowerCase().includes(searchText.toLowerCase())\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  input: {\n    backgroundColor: theme.palette.background.default,\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(2),\n    height: 32,\n    borderRadius: 16\n  }\n}));\n\nfunction Search({ className, ...rest }) {\n  const classes = useStyles();\n  const { contacts } = useSelector((state) => state.chat);\n  const inputRef = useRef(null);\n  const [searchText, setSearchText] = useState('');\n  const [displaySearchResults, setDisplaySearchResults] = useState(false);\n\n  const handleSearchChange = (event) => {\n    event.persist();\n    setSearchText(event.target.value);\n  };\n\n  const handleResultsClickAway = () => {\n    setDisplaySearchResults(false);\n  };\n\n  useEffect(() => {\n    if (searchText && !displaySearchResults) {\n      setDisplaySearchResults(true);\n    }\n    // eslint-disable-next-line\n  }, [searchText]);\n\n  const filteredContactIds = filterContacts(contacts, searchText);\n\n  return (\n    <div\n      className={clsx(classes.root, className)}\n      {...rest}\n    >\n      <Input\n        className={classes.input}\n        disableUnderline\n        onChange={handleSearchChange}\n        placeholder=\"Search contacts\"\n        value={searchText}\n        ref={inputRef}\n        autoFocus\n      />\n      <Popper\n        anchorEl={inputRef.current}\n        open={displaySearchResults}\n        placement=\"bottom-start\"\n      >\n        <ClickAwayListener onClickAway={handleResultsClickAway}>\n          <Box\n            component={Paper}\n            width={320}\n            maxWidth=\"100%\"\n            mt={1}\n          >\n            {filteredContactIds.length === 0 ? (\n              <Box\n                px={2}\n                pb={2}\n                pt={2}\n                textAlign=\"center\"\n              >\n                <Typography\n                  variant=\"h4\"\n                  color=\"textPrimary\"\n                  gutterBottom\n                >\n                  Nothing Found\n                </Typography>\n                <Typography\n                  variant=\"body2\"\n                  color=\"textSecondary\"\n                >\n                  We couldn&apos;t find any matches for &quot;\n                  {searchText}\n                  &quot;. Try checking for typos or using complete words.\n                </Typography>\n              </Box>\n            ) : (\n              <>\n                <Box\n                  px={2}\n                  pt={2}\n                >\n                  <Typography\n                    variant=\"h6\"\n                    color=\"textSecondary\"\n                  >\n                    Contacts\n                  </Typography>\n                </Box>\n                <List>\n                  {filteredContactIds.map((contactId) => {\n                    const contact = contacts.byId[contactId];\n\n                    return (\n                      <ListItem\n                        button\n                        component={RouterLink}\n                        key={contact.id}\n                        to={`/app/chat/${contact.username}`}\n                      >\n                        <ListItemAvatar>\n                          <Avatar\n                            src={contact.avatar}\n                            className={classes.contactAvatar}\n                          />\n                        </ListItemAvatar>\n                        <ListItemText\n                          primary={contact.name}\n                          primaryTypographyProps={{\n                            noWrap: true,\n                            variant: 'h6',\n                            color: 'textPrimary'\n                          }}\n                        />\n                      </ListItem>\n                    );\n                  })}\n                </List>\n              </>\n            )}\n          </Box>\n        </ClickAwayListener>\n      </Popper>\n    </div>\n  );\n}\n\nSearch.propTypes = {\n  className: PropTypes.string\n};\n\nexport default Search;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport {\n  Box,\n  Divider,\n  Hidden,\n  IconButton,\n  SvgIcon,\n  Typography,\n  makeStyles\n} from '@material-ui/core';\nimport { Menu as MenuIcon } from 'react-feather';\nimport { openSidebar } from 'src/actions/chatActions';\nimport MessageAdd from '../MessageAdd';\nimport Search from './Search';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    display: 'flex',\n    flexDirection: 'column',\n    backgroundColor: theme.palette.background.dark\n  },\n  search: {\n    marginLeft: theme.spacing(2)\n  }\n}));\n\nfunction ThreadNew() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  const handleOpenSidebar = () => {\n    dispatch(openSidebar());\n  };\n\n  return (\n    <div className={classes.root}>\n      <Hidden mdUp>\n        <Box\n          px={2}\n          py={1}\n          bgcolor=\"background.default\"\n        >\n          <IconButton\n            className={classes.menuButton}\n            edge=\"start\"\n            onClick={handleOpenSidebar}\n          >\n            <SvgIcon fontSize=\"small\">\n              <MenuIcon />\n            </SvgIcon>\n          </IconButton>\n        </Box>\n        <Divider />\n      </Hidden>\n      <Box\n        display=\"flex\"\n        alignItems=\"center\"\n        p={2}\n      >\n        <Typography\n          variant=\"body1\"\n          color=\"textSecondary\"\n        >\n          To:\n        </Typography>\n        <Search className={classes.search} />\n      </Box>\n      <Box flexGrow={1} />\n      <Divider />\n      <MessageAdd disabled />\n    </div>\n  );\n}\n\nexport default ThreadNew;\n","import React, {\n  useEffect,\n  useRef\n} from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { makeStyles } from '@material-ui/core';\nimport Page from 'src/components/Page';\nimport { getContacts } from 'src/actions/chatActions';\nimport Sidebar from './Sidebar';\nimport ThreadDetails from './ThreadDetails';\nimport ThreadNew from './ThreadNew';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    backgroundColor: theme.palette.background.dark,\n    height: '100%',\n    display: 'flex',\n    overflow: 'hidden',\n    position: 'relative'\n  }\n}));\n\nfunction ChatView() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const { threadKey } = useParams();\n  const pageRef = useRef(null);\n\n  useEffect(() => {\n    dispatch(getContacts());\n  }, [dispatch]);\n\n  return (\n    <Page\n      className={classes.root}\n      title=\"Chat\"\n      ref={pageRef}\n    >\n      <Sidebar containerRef={pageRef} />\n      {threadKey ? <ThreadDetails /> : <ThreadNew /> }\n    </Page>\n  );\n}\n\nexport default ChatView;\n"],"sourceRoot":""}