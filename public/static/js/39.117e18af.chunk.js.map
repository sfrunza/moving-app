{"version":3,"sources":["utils/getInitials.js","views/management/CustomerListView/Header.js","views/management/CustomerListView/Results.js","views/management/CustomerListView/index.js"],"names":["name","replace","split","slice","map","v","toUpperCase","join","useStyles","makeStyles","theme","root","action","marginBottom","spacing","marginLeft","actionIcon","marginRight","Header","className","rest","classes","Grid","clsx","container","justify","item","Breadcrumbs","separator","fontSize","aria-label","Link","variant","color","to","component","RouterLink","Typography","Box","mt","Button","SvgIcon","tabs","value","label","sortOptions","descendingComparator","a","b","orderBy","applySort","customers","sort","comparator","order","getComparator","stabilizedThis","el","index","queryField","width","bulkOperations","position","bulkActions","paddingLeft","paddingRight","marginTop","zIndex","backgroundColor","palette","background","default","bulkAction","avatar","height","Results","useState","currentTab","setCurrentTab","selectedCustomers","setSelectedCustomers","page","setPage","limit","setLimit","query","setQuery","setSort","isProspect","isReturning","acceptsMarketing","filters","setFilters","handleSelectAllCustomers","event","target","checked","customer","id","filteredCustomers","filter","matches","containsQuery","forEach","property","toLowerCase","includes","Object","keys","key","applyFilters","paginatedCustomers","applyPagination","enableBulkOperations","length","selectedSomeCustomers","selectedAllCustomers","Card","Tabs","onChange","updatedFilters","scrollButtons","textColor","tab","Tab","Divider","p","minHeight","display","alignItems","TextField","InputProps","startAdornment","InputAdornment","persist","placeholder","flexGrow","select","SelectProps","native","option","Checkbox","indeterminate","minWidth","Table","TableHead","TableRow","TableCell","padding","align","TableBody","isCustomerSelected","hover","selected","customerId","prevSelected","Avatar","src","getInitials","first_name","last_name","email","phoneNumberString","match","formatPhoneNumber","phone","IconButton","TablePagination","count","onChangePage","newPage","onChangeRowsPerPage","rowsPerPage","rowsPerPageOptions","defaultProps","dark","paddingTop","paddingBottom","CustomerListView","isMountedRef","useIsMountedRef","setCustomers","getCustomers","useCallback","axios","get","then","response","current","data","useEffect","Page","title","Container","maxWidth"],"mappings":"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","file":"static/js/39.117e18af.chunk.js","sourcesContent":["export default (name = '') => name\n  .replace(/\\s+/, ' ')\n  .split(' ')\n  .slice(0, 2)\n  .map((v) => v && v[0].toUpperCase())\n  .join('');\n","import React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport {\n  Box,\n  Breadcrumbs,\n  Button,\n  Grid,\n  Link,\n  SvgIcon,\n  Typography,\n  makeStyles\n} from '@material-ui/core';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\nimport {\n  PlusCircle as PlusCircleIcon,\n  Download as DownloadIcon,\n  Upload as UploadIcon\n} from 'react-feather';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  action: {\n    marginBottom: theme.spacing(1),\n    '& + &': {\n      marginLeft: theme.spacing(1)\n    }\n  },\n  actionIcon: {\n    marginRight: theme.spacing(1)\n  }\n}));\n\nfunction Header({ className, ...rest }) {\n  const classes = useStyles();\n\n  return (\n    <Grid\n      className={clsx(classes.root, className)}\n      container\n      justify=\"space-between\"\n      spacing={3}\n      {...rest}\n    >\n      <Grid item>\n        <Breadcrumbs\n          separator={<NavigateNextIcon fontSize=\"small\" />}\n          aria-label=\"breadcrumb\"\n        >\n          <Link\n            variant=\"body1\"\n            color=\"inherit\"\n            to=\"/app\"\n            component={RouterLink}\n          >\n            Dashboard\n          </Link>\n          <Typography\n            variant=\"body1\"\n            color=\"textPrimary\"\n          >\n            Customers\n          </Typography>\n        </Breadcrumbs>\n        <Typography\n          variant=\"h3\"\n          color=\"textPrimary\"\n        >\n          All Customers\n        </Typography>\n        <Box mt={2}>\n          <Button className={classes.action}>\n            <SvgIcon\n              fontSize=\"small\"\n              className={classes.actionIcon}\n            >\n              <UploadIcon />\n            </SvgIcon>\n            Import\n          </Button>\n          <Button className={classes.action}>\n            <SvgIcon\n              fontSize=\"small\"\n              className={classes.actionIcon}\n            >\n              <DownloadIcon />\n            </SvgIcon>\n            Export\n          </Button>\n        </Box>\n      </Grid>\n      <Grid item>\n        <Button\n          color=\"secondary\"\n          variant=\"contained\"\n          className={classes.action}\n        >\n          <SvgIcon\n            fontSize=\"small\"\n            className={classes.actionIcon}\n          >\n            <PlusCircleIcon />\n          </SvgIcon>\n          New Customer\n        </Button>\n      </Grid>\n    </Grid>\n  );\n}\n\nHeader.propTypes = {\n  className: PropTypes.string\n};\n\nexport default Header;\n","/* eslint-disable max-len */\nimport React, { useState } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport {\n  Avatar,\n  Box,\n  Button,\n  Card,\n  Checkbox,\n  Divider,\n  IconButton,\n  InputAdornment,\n  Link,\n  SvgIcon,\n  Tab,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TablePagination,\n  TableRow,\n  Tabs,\n  TextField,\n  makeStyles\n} from '@material-ui/core';\nimport {\n  Edit as EditIcon,\n  ArrowRight as ArrowRightIcon,\n  Search as SearchIcon\n} from 'react-feather';\nimport getInitials from 'src/utils/getInitials';\n\nconst tabs = [\n  {\n    value: 'all',\n    label: 'All'\n  },\n  {\n    value: 'acceptsMarketing',\n    label: 'Accepts Marketing'\n  },\n  {\n    value: 'isProspect',\n    label: 'Prospect'\n  },\n  {\n    value: 'isReturning',\n    label: 'Returning'\n  }\n];\n\nconst sortOptions = [\n  {\n    value: 'updatedAt|desc',\n    label: 'Last update (newest first)'\n  },\n  {\n    value: 'updatedAt|asc',\n    label: 'Last update (oldest first)'\n  },\n  {\n    value: 'orders|desc',\n    label: 'Total orders (high to low)'\n  },\n  {\n    value: 'orders|asc',\n    label: 'Total orders (low to high)'\n  }\n];\n\nfunction applyFilters(customers, query, filters) {\n  return customers.filter((customer) => {\n    let matches = true;\n\n    if (query) {\n      const properties = ['email', 'first_name', 'last_name'];\n      let containsQuery = false;\n\n      properties.forEach((property) => {\n        if (customer[property].toLowerCase().includes(query.toLowerCase())) {\n          containsQuery = true;\n        }\n      });\n\n      if (!containsQuery) {\n        matches = false;\n      }\n    }\n\n    Object.keys(filters).forEach((key) => {\n      const value = filters[key];\n\n      if (value && customer[key] !== value) {\n        matches = false;\n      }\n    });\n\n    return matches;\n  });\n}\n\nfunction applyPagination(customers, page, limit) {\n  return customers.slice(page * limit, page * limit + limit);\n}\n\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n\n  return 0;\n}\n\nfunction getComparator(order, orderBy) {\n  return order === 'desc'\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction applySort(customers, sort) {\n  const [orderBy, order] = sort.split('|');\n  const comparator = getComparator(order, orderBy);\n  const stabilizedThis = customers.map((el, index) => [el, index]);\n\n  stabilizedThis.sort((a, b) => {\n    // eslint-disable-next-line no-shadow\n    const order = comparator(a[0], b[0]);\n\n    if (order !== 0) return order;\n\n    return a[1] - b[1];\n  });\n\n  return stabilizedThis.map((el) => el[0]);\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  queryField: {\n    width: 500\n  },\n  bulkOperations: {\n    position: 'relative'\n  },\n  bulkActions: {\n    paddingLeft: 4,\n    paddingRight: 4,\n    marginTop: 6,\n    position: 'absolute',\n    width: '100%',\n    zIndex: 2,\n    backgroundColor: theme.palette.background.default\n  },\n  bulkAction: {\n    marginLeft: theme.spacing(2)\n  },\n  avatar: {\n    height: 42,\n    width: 42,\n    marginRight: theme.spacing(1)\n  }\n}));\n\nfunction Results({ className, customers, ...rest }) {\n  const classes = useStyles();\n  const [currentTab, setCurrentTab] = useState('all');\n  const [selectedCustomers, setSelectedCustomers] = useState([]);\n  const [page, setPage] = useState(0);\n  const [limit, setLimit] = useState(10);\n  const [query, setQuery] = useState('');\n  const [sort, setSort] = useState(sortOptions[0].value);\n  const [filters, setFilters] = useState({\n    isProspect: null,\n    isReturning: null,\n    acceptsMarketing: null\n  });\n\n  const handleTabsChange = (event, value) => {\n    const updatedFilters = {\n      ...filters,\n      isProspect: null,\n      isReturning: null,\n      acceptsMarketing: null\n    };\n\n    if (value !== 'all') {\n      updatedFilters[value] = true;\n    }\n\n    setFilters(updatedFilters);\n    setSelectedCustomers([]);\n    setCurrentTab(value);\n  };\n\n  const handleQueryChange = (event) => {\n    event.persist();\n    setQuery(event.target.value);\n  };\n\n  const handleSortChange = (event) => {\n    event.persist();\n    setSort(event.target.value);\n  };\n\n  const handleSelectAllCustomers = (event) => {\n    setSelectedCustomers(event.target.checked\n      ? customers.map((customer) => customer.id)\n      : []);\n  };\n\n  const handleSelectOneCustomer = (event, customerId) => {\n    if (!selectedCustomers.includes(customerId)) {\n      setSelectedCustomers((prevSelected) => [...prevSelected, customerId]);\n    } else {\n      setSelectedCustomers((prevSelected) => prevSelected.filter((id) => id !== customerId));\n    }\n  };\n\n  const handlePageChange = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleLimitChange = (event) => {\n    setLimit(event.target.value);\n  };\n\n  const formatPhoneNumber = (phoneNumberString) => {\n    let cleaned = ('' + phoneNumberString).replace(/\\D/g, '')\n    let match = cleaned.match(/^(\\d{3})(\\d{3})(\\d{4})$/)\n    if (match) {\n      return '(' + match[1] + ') ' + match[2] + '-' + match[3]\n    }\n    return null\n  }\n\n  // Usually query is done on backend with indexing solutions\n  const filteredCustomers = applyFilters(customers, query, filters);\n  const sortedCustomers = applySort(filteredCustomers, sort);\n  const paginatedCustomers = applyPagination(sortedCustomers, page, limit);\n  const enableBulkOperations = selectedCustomers.length > 0;\n  const selectedSomeCustomers = selectedCustomers.length > 0 && selectedCustomers.length < customers.length;\n  const selectedAllCustomers = selectedCustomers.length === customers.length;\n\n  return (\n    <Card\n      className={clsx(classes.root, className)}\n      {...rest}\n    >\n      <Tabs\n        onChange={handleTabsChange}\n        scrollButtons=\"auto\"\n        textColor=\"secondary\"\n        value={currentTab}\n        variant=\"scrollable\"\n      >\n        {tabs.map((tab) => (\n          <Tab\n            key={tab.value}\n            value={tab.value}\n            label={tab.label}\n          />\n        ))}\n      </Tabs>\n      <Divider />\n      <Box\n        p={2}\n        minHeight={56}\n        display=\"flex\"\n        alignItems=\"center\"\n      >\n        <TextField\n          className={classes.queryField}\n          InputProps={{\n            startAdornment: (\n              <InputAdornment position=\"start\">\n                <SvgIcon\n                  fontSize=\"small\"\n                  color=\"action\"\n                >\n                  <SearchIcon />\n                </SvgIcon>\n              </InputAdornment>\n            )\n          }}\n          onChange={handleQueryChange}\n          placeholder=\"Search customers\"\n          value={query}\n          variant=\"outlined\"\n        />\n        <Box flexGrow={1} />\n        <TextField\n          label=\"Sort By\"\n          name=\"sort\"\n          onChange={handleSortChange}\n          select\n          SelectProps={{ native: true }}\n          value={sort}\n          variant=\"outlined\"\n        >\n          {sortOptions.map((option) => (\n            <option\n              key={option.value}\n              value={option.value}\n            >\n              {option.label}\n            </option>\n          ))}\n        </TextField>\n      </Box>\n      {enableBulkOperations && (\n        <div className={classes.bulkOperations}>\n          <div className={classes.bulkActions}>\n            <Checkbox\n              checked={selectedAllCustomers}\n              indeterminate={selectedSomeCustomers}\n              onChange={handleSelectAllCustomers}\n            />\n            <Button\n              variant=\"outlined\"\n              className={classes.bulkAction}\n            >\n              Delete\n            </Button>\n            <Button\n              variant=\"outlined\"\n              className={classes.bulkAction}\n            >\n              Edit\n            </Button>\n          </div>\n        </div>\n      )}\n      <PerfectScrollbar>\n        <Box minWidth={700}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell padding=\"checkbox\">\n                  <Checkbox\n                    checked={selectedAllCustomers}\n                    indeterminate={selectedSomeCustomers}\n                    onChange={handleSelectAllCustomers}\n                  />\n                </TableCell>\n                <TableCell>\n                  Name\n                </TableCell>\n                <TableCell>\n                  Email\n                </TableCell>\n                <TableCell>\n                  Phone\n                </TableCell>\n                <TableCell align=\"right\">\n                  Actions\n                </TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {paginatedCustomers.map((customer) => {\n                const isCustomerSelected = selectedCustomers.includes(customer.id);\n\n                return (\n                  <TableRow\n                    hover\n                    key={customer.id}\n                    selected={isCustomerSelected}\n                  >\n                    <TableCell padding=\"checkbox\">\n                      <Checkbox\n                        checked={isCustomerSelected}\n                        onChange={(event) => handleSelectOneCustomer(event, customer.id)}\n                        value={isCustomerSelected}\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <Box\n                        display=\"flex\"\n                        alignItems=\"center\"\n                      >\n                        <Avatar\n                          className={classes.avatar}\n                          src={customer.avatar}\n                        >\n                          {getInitials(customer.first_name + ' ' + customer.last_name)}\n                        </Avatar>\n                        <div>\n                          <Link\n                            color=\"inherit\"\n                            component={RouterLink}\n                            to=\"/app/management/customers/1\"\n                            variant=\"h6\"\n                          >\n                            {customer.first_name} {customer.last_name}\n                          </Link>\n                        </div>\n                      </Box>\n                    </TableCell>\n                    <TableCell>\n                      {customer.email}\n                    </TableCell>\n                    <TableCell>\n                      {formatPhoneNumber(customer.phone)}\n                    </TableCell>\n                    <TableCell align=\"right\">\n                      <IconButton\n                        component={RouterLink}\n                        to=\"/app/management/customers/1/edit\"\n                      >\n                        <SvgIcon fontSize=\"small\">\n                          <EditIcon />\n                        </SvgIcon>\n                      </IconButton>\n                      <IconButton\n                        component={RouterLink}\n                        to=\"/app/management/customers/1\"\n                      >\n                        <SvgIcon fontSize=\"small\">\n                          <ArrowRightIcon />\n                        </SvgIcon>\n                      </IconButton>\n                    </TableCell>\n                  </TableRow>\n                );\n              })}\n            </TableBody>\n          </Table>\n        </Box>\n      </PerfectScrollbar>\n      <TablePagination\n        component=\"div\"\n        count={filteredCustomers.length}\n        onChangePage={handlePageChange}\n        onChangeRowsPerPage={handleLimitChange}\n        page={page}\n        rowsPerPage={limit}\n        rowsPerPageOptions={[5, 10, 25]}\n      />\n    </Card>\n  );\n}\n\nResults.propTypes = {\n  className: PropTypes.string,\n  customers: PropTypes.array\n};\n\nResults.defaultProps = {\n  customers: []\n};\n\nexport default Results;\n","import React, {\n  useState,\n  useEffect,\n  useCallback\n} from 'react';\nimport {\n  Box,\n  Container,\n  makeStyles\n} from '@material-ui/core';\nimport axios from 'axios';\nimport Page from 'src/components/Page';\nimport useIsMountedRef from 'src/hooks/useIsMountedRef';\nimport Header from './Header';\nimport Results from './Results';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    backgroundColor: theme.palette.background.dark,\n    minHeight: '100%',\n    paddingTop: theme.spacing(3),\n    paddingBottom: theme.spacing(3)\n  }\n}));\n\nfunction CustomerListView() {\n  const classes = useStyles();\n  const isMountedRef = useIsMountedRef();\n  const [customers, setCustomers] = useState(null);\n\n  const getCustomers = useCallback(() => {\n    axios\n      .get('/api/v1/customers.json')\n      .then((response) => {\n        if (isMountedRef.current) {\n          setCustomers(response.data);\n        }\n      });\n  }, [isMountedRef]);\n\n  useEffect(() => {\n    getCustomers();\n  }, [getCustomers]);\n\n  if (!customers) {\n    return null;\n  }\n\n  return (\n    <Page\n      className={classes.root}\n      title=\"Customer List\"\n    >\n      <Container maxWidth={false}>\n        <Header />\n        {customers && (\n          <Box mt={3}>\n            <Results customers={customers} />\n          </Box>\n        )}\n      </Container>\n    </Page>\n  );\n}\n\nexport default CustomerListView;\n"],"sourceRoot":""}