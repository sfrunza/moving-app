{"version":3,"sources":["views/management/JobListView/Header.js","views/management/JobListView/Results.js","views/management/JobListView/index.js"],"names":["useStyles","makeStyles","theme","root","action","marginBottom","spacing","marginLeft","actionIcon","marginRight","Header","className","rest","classes","Grid","container","justify","clsx","item","Breadcrumbs","separator","fontSize","aria-label","Link","variant","color","to","component","RouterLink","Typography","avalabilityOptions","id","name","bulkOperations","position","bulkActions","paddingLeft","paddingRight","marginTop","width","zIndex","backgroundColor","palette","background","default","bulkAction","queryField","categoryField","flexBasis","availabilityField","stockField","shippableField","imageCell","flexGrow","flexShrink","image","height","pastDate","colors","deepOrange","Results","jobs","users","today","moment","toJSON","slice","useState","selectedJobs","setSelectedJobs","page","setPage","limit","setLimit","query","setQuery","category","availability","inStock","isShippable","filters","setFilters","filteredJobs","filter","job","matches","lol","user_id","firstName","lastName","map","user","first_name","last_name","toLowerCase","includes","toString","job_status","applyFilters","paginatedJobs","applyPagination","enableBulkOperations","length","Card","Box","p","display","alignItems","TextField","InputProps","startAdornment","InputAdornment","SvgIcon","onChange","event","persist","target","value","placeholder","label","prevFilters","select","SelectProps","native","avalabilityOption","key","Button","minWidth","Table","TableHead","TableRow","TableCell","padding","align","TableBody","isJobSelected","customer","hover","selected","Checkbox","checked","jobId","prevSelected","underline","pick_up_date","format","job_type","status","text","Label","getInventoryLabel","created_at","IconButton","TablePagination","count","onChangePage","newPage","onChangeRowsPerPage","rowsPerPage","rowsPerPageOptions","defaultProps","dark","minHeight","paddingTop","paddingBottom","JobListView","isMountedRef","useIsMountedRef","setJobs","setUsers","getJobs","useCallback","axios","get","then","response","current","data","getUsers","useEffect","Page","title","Container","maxWidth","mt"],"mappings":"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","file":"static/js/27.ed90a24a.chunk.js","sourcesContent":["import React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport {\n  Breadcrumbs,\n  Grid,\n  Link,\n  Typography,\n  makeStyles\n} from '@material-ui/core';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  action: {\n    marginBottom: theme.spacing(1),\n    '& + &': {\n      marginLeft: theme.spacing(1)\n    }\n  },\n  actionIcon: {\n    marginRight: theme.spacing(1)\n  }\n}));\n\nfunction Header({ className, ...rest }) {\n  const classes = useStyles();\n\n  return (\n    <Grid\n      container\n      spacing={3}\n      justify=\"space-between\"\n      className={clsx(classes.root, className)}\n      {...rest}\n    >\n      <Grid item>\n        <Breadcrumbs\n          separator={<NavigateNextIcon fontSize=\"small\" />}\n          aria-label=\"breadcrumb\"\n        >\n          <Link\n            variant=\"body1\"\n            color=\"inherit\"\n            to=\"/app\"\n            component={RouterLink}\n          >\n            Dashboard\n          </Link>\n          <Typography\n            variant=\"body1\"\n            color=\"textPrimary\"\n          >\n            Jobs\n          </Typography>\n        </Breadcrumbs>\n        <Typography\n          variant=\"h3\"\n          color=\"textPrimary\"\n        >\n          All Jobs\n        </Typography>\n      </Grid>\n    </Grid>\n  );\n}\n\nHeader.propTypes = {\n  className: PropTypes.string\n};\n\nexport default Header;\n","/* eslint-disable max-len */\nimport React, { useState } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport {\n  Box,\n  Button,\n  Card,\n  Checkbox,\n  InputAdornment,\n  IconButton,\n  Link,\n  SvgIcon,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TablePagination,\n  TableRow,\n  TextField,\n  makeStyles,\n  colors,\n} from '@material-ui/core';\nimport {\n  Edit as EditIcon,\n  ArrowRight as ArrowRightIcon,\n  Search as SearchIcon\n} from 'react-feather';\nimport Label from 'src/components/Label';\nimport {\n  Package as PackageIcon,\n} from 'react-feather';\n\nconst avalabilityOptions = [\n  {\n    id: 'all',\n    name: 'All'\n  },\n  {\n    id: 'completed',\n    name: 'Completed'\n  },\n  {\n    id: 'canceled',\n    name: 'Canceled'\n  },\n  {\n    id: 'needsAttention',\n    name: 'Needs Attention'\n  }\n  ,\n  {\n    id: 'confirmed',\n    name: 'Confirmed'\n  }\n];\n\nfunction getInventoryLabel(status) {\n  const map = {\n    \"Completed\": {\n      text: 'Completed',\n      color: 'secondary'\n    },\n    \"Canceled\": {\n      text: 'Canceled',\n      color: 'error'\n    },\n    \"Needs Attention\" : {\n      text: 'Needs Attention',\n      color: 'warning'\n    },\n    \"Confirmed\" : {\n      text: 'Confirmed',\n      color: 'success'\n    }\n  };\n\n  const { text, color } = map[status];\n\n  return (\n    <Label color={color}>\n      {text}\n    </Label>\n  );\n}\n\nfunction applyFilters(jobs, users, query, filters) {\n\n  return jobs.filter((job) => {\n    let matches = true;\n    let lol = job.user_id\n    let firstName = '';\n    let lastName = '';\n    users.map(user => {\n      if (lol === user.id){\n        firstName = user.first_name;\n        lastName = user.last_name;\n      }\n    })\n\n    if (query && !firstName.toLowerCase().includes(query.toLowerCase()) && !lastName.toLowerCase().includes(query.toLowerCase()) && !job.id.toString().includes(query.toLowerCase())) {\n      matches = false;\n    }\n\n    if (filters.category && job.category !== filters.category) {\n      matches = false;\n    }\n\n    if (filters.availability) {\n      if (filters.availability === 'confirmed' && !['Confirmed'].includes(job.job_status)) {\n        matches = false;\n      }\n\n      if (filters.availability === 'completed' && !['Completed'].includes(job.job_status)) {\n        matches = false;\n      }\n\n      if (filters.availability === 'needsAttention' && !['Needs Attention'].includes(job.job_status)) {\n        matches = false;\n      }\n\n      if (filters.availability === 'canceled' && !['Canceled'].includes(job.job_status)) {\n        matches = false;\n      }\n    }\n\n    if (filters.inStock && !['Needs Attention'].includes(job.job_status)) {\n      matches = false;\n    }\n\n    if (filters.isShippable && !job.isShippable) {\n      matches = false;\n    }\n\n    return matches;\n  });\n}\n\nfunction applyPagination(jobs, page, limit) {\n  return jobs.slice(page * limit, page * limit + limit);\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n  },\n  bulkOperations: {\n    position: 'relative'\n  },\n  bulkActions: {\n    paddingLeft: 4,\n    paddingRight: 4,\n    marginTop: 6,\n    position: 'absolute',\n    width: '100%',\n    zIndex: 2,\n    backgroundColor: theme.palette.background.default\n  },\n  bulkAction: {\n    marginLeft: theme.spacing(2)\n  },\n  queryField: {\n    width: 500\n  },\n  categoryField: {\n    flexBasis: 200\n  },\n  availabilityField: {\n    marginLeft: theme.spacing(2),\n    flexBasis: 200\n  },\n  stockField: {\n    marginLeft: theme.spacing(2)\n  },\n  shippableField: {\n    marginLeft: theme.spacing(2)\n  },\n  imageCell: {\n    fontSize: 0,\n    width: 68,\n    flexBasis: 68,\n    flexGrow: 0,\n    flexShrink: 0\n  },\n  image: {\n    height: 68,\n    width: 68\n  },\n  pastDate: {\n    color: colors.deepOrange[500],\n  },\n}));\n\nfunction Results({ className, jobs, users, ...rest }) {\n  const classes = useStyles();\n  const today = moment().toJSON().slice(0, 10)\n  const [selectedJobs, setSelectedJobs] = useState([]);\n  const [page, setPage] = useState(0);\n  const [limit, setLimit] = useState(10);\n  const [query, setQuery] = useState('');\n  const [filters, setFilters] = useState({\n    category: null,\n    availability: null,\n    inStock: null,\n    isShippable: null\n  });\n\n  const handleQueryChange = (event) => {\n    event.persist();\n    setQuery(event.target.value);\n  };\n\n  const handleAvailabilityChange = (event) => {\n    event.persist();\n\n    let value = null;\n\n    if (event.target.value !== 'all') {\n      value = event.target.value;\n    }\n\n    setFilters((prevFilters) => ({\n      ...prevFilters,\n      availability: value\n    }));\n  };\n\n\n  const handleSelectOneJob = (event, jobId) => {\n    if (!selectedJobs.includes(jobId)) {\n      setSelectedJobs([jobId]);\n    } else {\n      setSelectedJobs((prevSelected) => prevSelected.filter((id) => id !== jobId));\n    }\n  };\n\n  const handlePageChange = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleLimitChange = (event) => {\n    setLimit(event.target.value);\n  };\n\n  // Usually query is done on backend with indexing solutions\n  const filteredJobs = applyFilters(jobs, users, query, filters);\n  const paginatedJobs = applyPagination(filteredJobs, page, limit);\n  const enableBulkOperations = selectedJobs.length > 0;\n  const selectedSomeJobs = selectedJobs.length > 0 && selectedJobs.length < jobs.length;\n  const selectedAllJobs = selectedJobs.length === jobs.length;\n\n  return (\n    <Card\n      className={clsx(classes.root, className)}\n      {...rest}\n    >\n      <Box p={2}>\n        <Box\n          display=\"flex\"\n          alignItems=\"center\"\n        >\n          <TextField\n            className={classes.queryField}\n            InputProps={{\n              startAdornment: (\n                <InputAdornment position=\"start\">\n                  <SvgIcon\n                    fontSize=\"small\"\n                    color=\"action\"\n                  >\n                    <SearchIcon />\n                  </SvgIcon>\n                </InputAdornment>\n              )\n            }}\n            onChange={handleQueryChange}\n            placeholder=\"Search by ID or Name\"\n            value={query}\n            variant=\"outlined\"\n          />\n          <Box flexGrow={1} />\n          <TextField\n            className={classes.availabilityField}\n            label=\"Sort By Status\"\n            name=\"availability\"\n            onChange={handleAvailabilityChange}\n            select\n            SelectProps={{ native: true }}\n            value={filters.availability || 'all'}\n            variant=\"outlined\"\n          >\n            {avalabilityOptions.map((avalabilityOption) => (\n              <option\n                key={avalabilityOption.id}\n                value={avalabilityOption.id}\n              >\n                {avalabilityOption.name}\n              </option>\n            ))}\n          </TextField>\n        </Box>\n      </Box>\n      {enableBulkOperations && (\n        <div className={classes.bulkOperations}>\n          <div className={classes.bulkActions}>\n            <Button\n              variant=\"outlined\"\n              className={classes.bulkAction}\n            >\n              Delete\n            </Button>\n            <Button\n              variant=\"outlined\"\n              className={classes.bulkAction}\n            >\n              Edit\n            </Button>\n          </div>\n        </div>\n      )}\n      <PerfectScrollbar>\n        <Box minWidth={1200}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell padding=\"checkbox\">\n\n                </TableCell>\n                <TableCell>\n                  Job ID\n                </TableCell>\n                <TableCell>\n                  Customer\n                </TableCell>\n                <TableCell>\n                  Moving Date\n                </TableCell>\n                <TableCell>\n                  Type of Service\n                </TableCell>\n                <TableCell>\n                  Status\n                </TableCell>\n                <TableCell>\n                  Submitted\n                </TableCell>\n\n                <TableCell align=\"right\">\n                  Actions\n                </TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n            {paginatedJobs.map((job) => {\n              const isJobSelected = selectedJobs.includes(job.id);\n              let lol = job.user_id\n              let customer = ''\n              users.map(user => {\n                if (lol === user.id){\n                  customer = user.first_name + \" \" +user.last_name\n                }\n              })\n                return (\n                  <TableRow\n                    hover\n                    key={job.id}\n                    selected={isJobSelected}\n                  >\n                    <TableCell padding=\"checkbox\">\n                      <Checkbox\n                        checked={isJobSelected}\n                        onChange={(event) => handleSelectOneJob(event, job.id)}\n                        value={isJobSelected}\n                      />\n                    </TableCell>\n                    <TableCell >\n                    <Link\n                      variant=\"subtitle2\"\n                      color=\"textPrimary\"\n                      component={RouterLink}\n                      underline=\"none\"\n                      to={`/app/jobs/${job.id}`}\n                    >\n                      #{job.id}\n                    </Link>\n                    </TableCell>\n                    <TableCell>\n                        {customer}\n                    </TableCell>\n                    {\n                      today > moment(job.pick_up_date).format('YYYY-MM-DD') ?\n                      <TableCell className={classes.pastDate}>\n                      {moment(job.pick_up_date).format('MMM DD YYYY')}\n                      </TableCell>\n                       :\n                       <TableCell>\n                       {moment(job.pick_up_date).format('MMM DD YYYY')}\n                       </TableCell>\n                    }\n                    <TableCell>\n                      {job.job_type}\n                    </TableCell>\n                    <TableCell>\n                      {getInventoryLabel(job.job_status)}\n                    </TableCell>\n                    <TableCell>\n                      {moment(job.created_at).format('MMM DD YYYY')}\n                    </TableCell>\n\n                    <TableCell align=\"right\">\n                      <IconButton>\n                        <SvgIcon fontSize=\"small\">\n                          <EditIcon />\n                        </SvgIcon>\n                      </IconButton>\n                      <IconButton>\n                      <Link\n                        variant=\"subtitle2\"\n                        color=\"textPrimary\"\n                        component={RouterLink}\n                        underline=\"none\"\n                        to={`/app/jobs/${job.id}`}\n                      >\n                        <SvgIcon fontSize=\"small\">\n                          <ArrowRightIcon />\n                        </SvgIcon>\n                      </Link>\n                      </IconButton>\n                    </TableCell>\n                  </TableRow>\n                );\n              })}\n            </TableBody>\n          </Table>\n          <TablePagination\n            component=\"div\"\n            count={filteredJobs.length}\n            onChangePage={handlePageChange}\n            onChangeRowsPerPage={handleLimitChange}\n            page={page}\n            rowsPerPage={limit}\n            rowsPerPageOptions={[5, 10, 25]}\n          />\n        </Box>\n      </PerfectScrollbar>\n    </Card>\n  );\n}\n\nResults.propTypes = {\n  className: PropTypes.string,\n  jobs: PropTypes.array\n};\n\nResults.defaultProps = {\n  jobs: []\n};\n\nexport default Results;\n","import React, {\n  useState,\n  useEffect,\n  useCallback\n} from 'react';\nimport {\n  Box,\n  Container,\n  makeStyles\n} from '@material-ui/core';\nimport axios from 'axios';\nimport Page from 'src/components/Page';\nimport useIsMountedRef from 'src/hooks/useIsMountedRef';\nimport Header from './Header';\nimport Results from './Results';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    backgroundColor: theme.palette.background.dark,\n    minHeight: '100%',\n    paddingTop: theme.spacing(3),\n    paddingBottom: 100\n  }\n}));\n\nfunction JobListView() {\n  const classes = useStyles();\n  const isMountedRef = useIsMountedRef();\n  const [jobs, setJobs] = useState(null);\n  const [users, setUsers] = useState(null);\n\n  const getJobs = useCallback(() => {\n    axios\n      .get('/api/v1/jobs.json')\n      .then((response) => {\n        if (isMountedRef.current) {\n          setJobs(response.data);\n        }\n      });\n  }, [isMountedRef]);\n\n  const getUsers = useCallback(() => {\n    axios\n      .get('/api/v1/users.json')\n      .then((response) => {\n        if (isMountedRef.current) {\n          setUsers(response.data.users);\n        }\n      });\n  }, [isMountedRef]);\n\n  useEffect(() => {\n    getJobs();\n    getUsers();\n  }, [getJobs, getUsers]);\n\n  if (!jobs || !users) {\n    return null;\n  }\n  return (\n    <Page\n      className={classes.root}\n      title=\"Job List\"\n    >\n      <Container maxWidth={false}>\n        <Header />\n        {jobs && (\n          <Box mt={5}>\n            <Results jobs={jobs} users={users}/>\n          </Box>\n        )}\n      </Container>\n    </Page>\n  );\n}\n\nexport default JobListView;\n"],"sourceRoot":""}