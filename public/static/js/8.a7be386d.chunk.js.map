{"version":3,"sources":["icons/Plus.js","managementPages/Scrollbar.js","icons/Search.js","managementPages/CustomerList/Header.js","components/FormatPhoneNumber.js","managementPages/CustomerList/Results.js","managementPages/CustomerList/index.js"],"names":["Plus","createSvgIcon","xmlns","viewBox","fill","fillRule","d","clipRule","Scrollbar","forwardRef","props","ref","children","other","test","navigator","userAgent","sx","overflowX","Search","Header","Grid","container","justifyContent","spacing","item","Typography","color","variant","Breadcrumbs","separator","ChevronRight","fontSize","style","marginTop","Link","component","RouterLink","to","Box","m","Button","disabled","disableElevation","startIcon","margin","formatPhoneNumber","phoneNumberString","match","replace","useStyles","makeStyles","theme","root","queryField","width","bulkOperations","position","bulkActions","paddingLeft","paddingRight","zIndex","backgroundColor","palette","background","level2","bulkAction","marginLeft","avatar","height","marginRight","badge","right","hoverIcon","text","secondary","primary","main","StyledTableCell","withStyles","head","body","TableCell","Results","className","customers","events","rest","classes","useState","selectedCustomers","setSelectedCustomers","page","setPage","limit","setLimit","query","setQuery","filteredCustomers","filter","customer","matches","containsQuery","forEach","property","toLowerCase","includes","applyFilters","paginatedCustomers","slice","applyPagination","enableBulkOperations","length","numberOfJobs","number","map","event","user","id","Card","clsx","p","minHeight","display","alignItems","TextField","InputProps","startAdornment","InputAdornment","SvgIcon","onChange","persist","target","value","placeholder","size","flexGrow","minWidth","Table","TableHead","TableRow","padding","align","TableBody","isCustomerSelected","hover","selected","Checkbox","checked","customerId","prevSelected","Avatar","src","first_name","last_name","Badge","badgeContent","email","phone","IconButton","PencilAlt","ArrowRight","TablePagination","count","onPageChange","newPage","onRowsPerPageChange","rowsPerPage","rowsPerPageOptions","defaultProps","CustomerList","dispatch","useDispatch","useSelector","state","errors","calendar","useEffect","getCustomers","getEvents","cleanCustomer","Page","title","paddingY","Container","maxWidth","mt"],"mappings":"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","file":"static/js/8.a7be386d.chunk.js","sourcesContent":["import createSvgIcon from '@material-ui/core/utils/createSvgIcon';\n\nconst Plus = createSvgIcon(\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 20 20\"\n    fill=\"currentColor\"\n  >\n    <path\n      fillRule=\"evenodd\"\n      d=\"M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z\"\n      clipRule=\"evenodd\"\n    />\n  </svg>, 'Plus'\n);\n\nexport default Plus;\n","import { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { Box } from '@material-ui/core';\n\nconst Scrollbar = forwardRef((props, ref) => {\n  const { children, ...other } = props;\n\n  const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n\n  if (isMobile) {\n    return (\n      <Box\n        ref={ref}\n        sx={{ overflowX: 'auto' }}\n      >\n        {children}\n      </Box>\n    );\n  }\n\n  return (\n    <PerfectScrollbar\n      // @ts-ignore\n      ref={ref}\n      {...other}\n    >\n      {children}\n    </PerfectScrollbar>\n  );\n});\n\nScrollbar.propTypes = {\n  children: PropTypes.node\n};\n\nexport default Scrollbar;\n","import createSvgIcon from '@material-ui/core/utils/createSvgIcon';\n\nconst Search = createSvgIcon(\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 20 20\"\n    fill=\"currentColor\"\n  >\n    <path\n      fillRule=\"evenodd\"\n      d=\"M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z\"\n      clipRule=\"evenodd\"\n    />\n  </svg>, 'Search'\n);\n\nexport default Search;\n","import React from \"react\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport {\n  Breadcrumbs,\n  Grid,\n  Link,\n  Typography,\n  Button,\n  Box,\n} from \"@material-ui/core\";\nimport PlusIcon from \"src/icons/Plus\";\nimport ChevronRightIcon from \"src/icons/ChevronRight\";\n\nfunction Header() {\n  return (\n    <Grid container justifyContent=\"space-between\" spacing={3}>\n      <Grid item>\n        <Typography color=\"textPrimary\" variant=\"h5\">\n          Customer list\n        </Typography>\n        <Breadcrumbs\n          aria-label=\"breadcrumb\"\n          separator={<ChevronRightIcon fontSize=\"small\" />}\n          style={{ marginTop: 8 }}\n        >\n          <Link\n            color=\"textPrimary\"\n            component={RouterLink}\n            to=\"/dashboard\"\n            variant=\"subtitle2\"\n          >\n            Dashboard\n          </Link>\n          <Typography color=\"textSecondary\" variant=\"subtitle2\">\n            Customers\n          </Typography>\n        </Breadcrumbs>\n      </Grid>\n      <Grid item>\n        <Box m={-1}>\n          <Button\n            color=\"primary\"\n            disabled\n            disableElevation\n            // onClick={handleAddClick}\n            startIcon={<PlusIcon fontSize=\"small\" />}\n            style={{ margin: 8 }}\n            variant=\"contained\"\n          >\n            New Appointment\n          </Button>\n        </Box>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default Header;\n","export const formatPhoneNumber = (phoneNumberString) => {\n  let cleaned = (\"\" + phoneNumberString).replace(/\\D/g, \"\");\n  let match = cleaned.match(/^(\\d{3})(\\d{3})(\\d{4})$/);\n  if (match) {\n    return \"(\" + match[1] + \") \" + match[2] + \"-\" + match[3];\n  }\n  return null;\n};\n","/* eslint-disable max-len */\nimport React, { useState } from \"react\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport clsx from \"clsx\";\nimport PropTypes from \"prop-types\";\nimport Scrollbar from \"../Scrollbar\";\nimport {\n  Avatar,\n  Box,\n  Button,\n  Card,\n  Checkbox,\n  IconButton,\n  InputAdornment,\n  Link,\n  SvgIcon,\n  Table,\n  TableBody,\n  TableHead,\n  TablePagination,\n  TableCell,\n  TableRow,\n  TextField,\n  makeStyles,\n  Typography,\n  Badge,\n  withStyles,\n} from \"@material-ui/core\";\nimport ArrowRightIcon from \"src/icons/ArrowRight\";\nimport PencilAltIcon from \"src/icons/PencilAlt\";\nimport SearchIcon from \"src/icons/Search\";\nimport { formatPhoneNumber } from \"src/components/FormatPhoneNumber\";\n\nfunction applyFilters(customers, query) {\n  return customers.filter((customer) => {\n    let matches = true;\n\n    if (query) {\n      const properties = [\"email\", \"first_name\", \"last_name\"];\n      let containsQuery = false;\n\n      properties.forEach((property) => {\n        if (\n          customer[property] != null &&\n          customer[property].toLowerCase().includes(query.toLowerCase())\n        ) {\n          containsQuery = true;\n        }\n      });\n\n      if (!containsQuery) {\n        matches = false;\n      }\n    }\n    return matches;\n  });\n}\n\nfunction applyPagination(customers, page, limit) {\n  return customers.slice(page * limit, page * limit + limit);\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  queryField: {\n    width: 500,\n  },\n  bulkOperations: {\n    position: \"relative\",\n  },\n  bulkActions: {\n    paddingLeft: 4,\n    paddingRight: 4,\n    marginTop: 11,\n    position: \"absolute\",\n    width: \"100%\",\n    zIndex: 2,\n    backgroundColor: theme.palette.background.level2,\n  },\n  bulkAction: {\n    marginLeft: theme.spacing(2),\n  },\n  avatar: {\n    height: 42,\n    width: 42,\n    marginRight: theme.spacing(1),\n  },\n  badge: {\n    \"& span\": {\n      right: \"-12px\",\n    },\n  },\n  hoverIcon: {\n    color: theme.palette.text.secondary,\n    \"&:hover\": {\n      color: theme.palette.primary.main,\n    },\n  },\n}));\n\nconst StyledTableCell = withStyles((theme) => ({\n  head: {\n    backgroundColor: theme.palette.background.level2,\n    color: theme.palette.text.secondary,\n  },\n  body: {\n    fontSize: 14,\n  },\n}))(TableCell);\n\nfunction Results({ className, customers, events, ...rest }) {\n  const classes = useStyles();\n  const [selectedCustomers, setSelectedCustomers] = useState([]);\n  const [page, setPage] = useState(0);\n  const [limit, setLimit] = useState(10);\n  const [query, setQuery] = useState(\"\");\n\n  const handleQueryChange = (event) => {\n    event.persist();\n    setQuery(event.target.value);\n  };\n\n  const handleSelectOneCustomer = (event, customerId) => {\n    if (!selectedCustomers.includes(customerId)) {\n      setSelectedCustomers([customerId]);\n    } else {\n      setSelectedCustomers((prevSelected) =>\n        prevSelected.filter((id) => id !== customerId)\n      );\n    }\n  };\n\n  const handlePageChange = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleLimitChange = (event) => {\n    setLimit(event.target.value);\n  };\n\n  // Usually query is done on backend with indexing solutions\n  const filteredCustomers = applyFilters(customers, query);\n  const paginatedCustomers = applyPagination(filteredCustomers, page, limit);\n  const enableBulkOperations = selectedCustomers.length > 0;\n\n  const numberOfJobs = (customer) => {\n    let number = 0;\n    events.map((event) => {\n      if (event.user.id === customer.id) {\n        number = number + 1;\n      }\n      return null;\n    });\n    return number;\n  };\n\n  return (\n    <Card className={clsx(classes.root, className)} {...rest}>\n      <Box p={2} minHeight={56} display=\"flex\" alignItems=\"center\">\n        <TextField\n          className={classes.queryField}\n          InputProps={{\n            startAdornment: (\n              <InputAdornment position=\"start\">\n                <SvgIcon fontSize=\"small\" color=\"action\">\n                  <SearchIcon />\n                </SvgIcon>\n              </InputAdornment>\n            ),\n          }}\n          onChange={handleQueryChange}\n          placeholder=\"Search by Name or Email\"\n          value={query}\n          size=\"small\"\n          variant=\"outlined\"\n        />\n        <Box flexGrow={1} />\n      </Box>\n      {enableBulkOperations && (\n        <div className={classes.bulkOperations}>\n          <div className={classes.bulkActions}>\n            <Button\n              variant=\"outlined\"\n              color=\"primary\"\n              className={classes.bulkAction}\n              component={RouterLink}\n              to={`/app/customers/${selectedCustomers[0]}/edit`}\n            >\n              Edit\n            </Button>\n          </div>\n        </div>\n      )}\n      <Scrollbar>\n        <Box minWidth={1000}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <StyledTableCell padding=\"checkbox\"></StyledTableCell>\n                <StyledTableCell>Name</StyledTableCell>\n                <StyledTableCell>Phone</StyledTableCell>\n                <StyledTableCell align=\"right\">Actions</StyledTableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {paginatedCustomers.map((customer) => {\n                const isCustomerSelected = selectedCustomers.includes(\n                  customer.id\n                );\n\n                return (\n                  <TableRow\n                    hover\n                    key={customer.id}\n                    selected={isCustomerSelected}\n                  >\n                    <TableCell padding=\"checkbox\">\n                      <Checkbox\n                        checked={isCustomerSelected}\n                        onChange={(event) =>\n                          handleSelectOneCustomer(event, customer.id)\n                        }\n                        value={isCustomerSelected}\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <Box display=\"flex\" alignItems=\"center\">\n                        <Avatar\n                          className={classes.avatar}\n                          src={customer.avatar}\n                        />\n                        <div>\n                          <Link\n                            color=\"inherit\"\n                            component={RouterLink}\n                            to={`/dashboard/customers/${customer.id}`}\n                            variant=\"subtitle2\"\n                          >\n                            {numberOfJobs(customer) === 1 ? (\n                              customer.first_name + \" \" + customer.last_name\n                            ) : (\n                              <Badge\n                                badgeContent={numberOfJobs(customer)}\n                                color=\"secondary\"\n                                className={classes.badge}\n                              >\n                                {customer.first_name + \" \" + customer.last_name}\n                              </Badge>\n                            )}\n                          </Link>\n                          <Typography color=\"textSecondary\" variant=\"body2\">\n                            {customer.email}\n                          </Typography>\n                        </div>\n                      </Box>\n                    </TableCell>\n                    <TableCell>{formatPhoneNumber(customer.phone)}</TableCell>\n                    <TableCell align=\"right\">\n                      <IconButton\n                        classes={{ root: classes.hoverIcon }}\n                        component={RouterLink}\n                        to={`/dashboard/customers/${customer.id}/edit`}\n                      >\n                        <PencilAltIcon fontSize=\"small\" />\n                      </IconButton>\n                      <IconButton\n                        classes={{ root: classes.hoverIcon }}\n                        component={RouterLink}\n                        to={`/dashboard/customers/${customer.id}`}\n                      >\n                        <ArrowRightIcon fontSize=\"small\" />\n                      </IconButton>\n                    </TableCell>\n                  </TableRow>\n                );\n              })}\n            </TableBody>\n          </Table>\n        </Box>\n      </Scrollbar>\n      <TablePagination\n        component=\"div\"\n        count={filteredCustomers.length}\n        onPageChange={handlePageChange}\n        onRowsPerPageChange={handleLimitChange}\n        page={page}\n        rowsPerPage={limit}\n        rowsPerPageOptions={[5, 10, 25]}\n      />\n    </Card>\n  );\n}\n\nResults.propTypes = {\n  className: PropTypes.string,\n  customers: PropTypes.array,\n};\n\nResults.defaultProps = {\n  customers: [],\n};\n\nexport default Results;\n","import React, { useEffect } from \"react\";\nimport { Box, Container } from \"@material-ui/core\";\nimport Page from \"src/components/Page\";\nimport Header from \"./Header\";\nimport Results from \"./Results\";\nimport { useSelector, useDispatch } from \"src/store\";\nimport { cleanCustomer, getCustomers } from \"src/slices/customers\";\nimport { getEvents } from \"src/slices/calendar\";\n\nfunction CustomerList() {\n  const dispatch = useDispatch();\n  const { customers, errors } = useSelector((state) => state.customers);\n  const { events } = useSelector((state) => state.calendar);\n\n  useEffect(() => {\n    dispatch(getCustomers());\n    dispatch(getEvents());\n    dispatch(cleanCustomer());\n  }, [dispatch]);\n\n  return (\n    <Page title=\"Customer List\">\n      <Box\n        sx={{\n          backgroundColor: \"background.default\",\n          minHeight: \"100%\",\n          paddingY: 8,\n        }}\n      >\n        <Container maxWidth={false}>\n          <Header />\n          {errors && (\n            <Box mt={3}>\n              <p>{errors}</p>\n            </Box>\n          )}\n          {customers && (\n            <Box mt={3}>\n              <Results customers={customers} errors={errors} events={events} />\n            </Box>\n          )}\n        </Container>\n      </Box>\n    </Page>\n  );\n}\n\nexport default CustomerList;\n"],"sourceRoot":""}