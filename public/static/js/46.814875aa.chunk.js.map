{"version":3,"sources":["views/management/CustomerEditView/CustomerEditForm.js","views/management/CustomerEditView/Header.js","views/management/CustomerEditView/index.js"],"names":["useStyles","makeStyles","root","CustomerEditForm","className","customer","rest","classes","enqueueSnackbar","useSnackbar","initialValues","address1","address2","country","discountedPrices","email","fullName","phone","state","verified","validationSchema","Yup","shape","max","required","onSubmit","values","a","resetForm","setErrors","setStatus","setSubmitting","wait","success","variant","action","Button","submit","message","errors","handleBlur","handleChange","handleSubmit","isSubmitting","touched","clsx","Card","CardContent","Grid","container","spacing","item","md","xs","TextField","error","Boolean","fullWidth","helperText","label","name","onBlur","onChange","value","Typography","color","Switch","checked","edge","Box","mt","type","disabled","Header","Breadcrumbs","separator","fontSize","aria-label","Link","to","component","RouterLink","theme","backgroundColor","palette","background","dark","minHeight","paddingTop","paddingBottom","CustomerEditView","isMountedRef","useIsMountedRef","useState","setCustomer","getCustomer","useCallback","axios","get","then","response","current","data","useEffect","Page","title","Container","maxWidth"],"mappings":"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","file":"static/js/46.814875aa.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\nimport { useSnackbar } from 'notistack';\nimport {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  Grid,\n  Switch,\n  TextField,\n  Typography,\n  makeStyles\n} from '@material-ui/core';\nimport wait from 'src/utils/wait';\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nfunction CustomerEditForm({\n  className,\n  customer,\n  ...rest\n}) {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n\n  return (\n    <Formik\n      initialValues={{\n        address1: customer.address1 || '',\n        address2: customer.address2 || '',\n        country: customer.country || '',\n        discountedPrices: customer.discountedPrices || false,\n        email: customer.email || '',\n        fullName: customer.fullName || '',\n        phone: customer.phone || '',\n        state: customer.state || '',\n        verified: customer.verified || false\n      }}\n      validationSchema={Yup.object().shape({\n        address1: Yup.string().max(255),\n        address2: Yup.string().max(255),\n        country: Yup.string().max(255),\n        discountedPrices: Yup.bool(),\n        email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\n        fullName: Yup.string().max(255).required('Name is required'),\n        phone: Yup.string().max(15),\n        state: Yup.string().max(255),\n        verified: Yup.bool()\n      })}\n      onSubmit={async (values, {\n        resetForm,\n        setErrors,\n        setStatus,\n        setSubmitting\n      }) => {\n        try {\n          // Make API request\n          await wait(500);\n          resetForm();\n          setStatus({ success: true });\n          setSubmitting(false);\n          enqueueSnackbar('Customer updated', {\n            variant: 'success',\n            action: <Button>See all</Button>\n          });\n        } catch (error) {\n          setStatus({ success: false });\n          setErrors({ submit: error.message });\n          setSubmitting(false);\n        }\n      }}\n    >\n      {({\n        errors,\n        handleBlur,\n        handleChange,\n        handleSubmit,\n        isSubmitting,\n        touched,\n        values\n      }) => (\n        <form\n          className={clsx(classes.root, className)}\n          onSubmit={handleSubmit}\n          {...rest}\n        >\n\n          <Card>\n            <CardContent>\n\n              <Grid\n                container\n                spacing={3}\n              >\n                <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <TextField\n                    error={Boolean(touched.email && errors.email)}\n                    fullWidth\n                    helperText={touched.email && errors.email}\n                    label=\"Email address\"\n                    name=\"email\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    required\n                    value={values.email}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <TextField\n                    error={Boolean(touched.fullName && errors.fullName)}\n                    fullWidth\n                    helperText={touched.fullName && errors.fullName}\n                    label=\"Full name\"\n                    name=\"fullName\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    required\n                    value={values.fullName}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <TextField\n                    error={Boolean(touched.phone && errors.phone)}\n                    fullWidth\n                    helperText={touched.phone && errors.phone}\n                    label=\"Phone number\"\n                    name=\"phone\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    value={values.phone}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <TextField\n                    error={Boolean(touched.state && errors.state)}\n                    fullWidth\n                    helperText={touched.state && errors.state}\n                    label=\"State/Region\"\n                    name=\"state\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    value={values.state}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <TextField\n                    error={Boolean(touched.country && errors.country)}\n                    fullWidth\n                    helperText={touched.country && errors.country}\n                    label=\"Country\"\n                    name=\"country\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    value={values.country}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <TextField\n                    error={Boolean(touched.address1 && errors.address1)}\n                    fullWidth\n                    helperText={touched.address1 && errors.address1}\n                    label=\"Address 1\"\n                    name=\"address1\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    value={values.address1}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <TextField\n                    error={Boolean(touched.address2 && errors.address2)}\n                    fullWidth\n                    helperText={touched.address2 && errors.address2}\n                    label=\"Address 2\"\n                    name=\"address2\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    value={values.address2}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid item />\n                <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <Typography\n                    variant=\"h5\"\n                    color=\"textPrimary\"\n                  >\n                    Email Verified\n                  </Typography>\n                  <Typography\n                    variant=\"body2\"\n                    color=\"textSecondary\"\n                  >\n                    Disabling this will automatically send the user a verification\n                    email\n                  </Typography>\n                  <Switch\n                    checked={values.verified}\n                    color=\"secondary\"\n                    edge=\"start\"\n                    name=\"verified\"\n                    onChange={handleChange}\n                    value={values.verified}\n                  />\n                </Grid>\n                <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <Typography\n                    variant=\"h5\"\n                    color=\"textPrimary\"\n                  >\n                    Discounted Prices\n                  </Typography>\n                  <Typography\n                    variant=\"body2\"\n                    color=\"textSecondary\"\n                  >\n                    This will give the user discountedprices for all products\n                  </Typography>\n                  <Switch\n                    checked={values.discountedPrices}\n                    color=\"secondary\"\n                    edge=\"start\"\n                    name=\"discountedPrices\"\n                    onChange={handleChange}\n                    value={values.discountedPrices}\n                  />\n                </Grid>\n              </Grid>\n              <Box mt={2}>\n                <Button\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  type=\"submit\"\n                  disabled={isSubmitting}\n                >\n                  Update Customer\n                </Button>\n              </Box>\n            </CardContent>\n          </Card>\n        </form>\n      )}\n    </Formik>\n  );\n}\n\nCustomerEditForm.propTypes = {\n  className: PropTypes.string,\n  customer: PropTypes.object.isRequired\n};\n\nexport default CustomerEditForm;\n","import React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport {\n  Breadcrumbs,\n  Link,\n  Typography,\n  makeStyles\n} from '@material-ui/core';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nfunction Header({ className, ...rest }) {\n  const classes = useStyles();\n\n  return (\n    <div\n      className={clsx(classes.root, className)}\n      {...rest}\n    >\n      <Breadcrumbs\n        separator={<NavigateNextIcon fontSize=\"small\" />}\n        aria-label=\"breadcrumb\"\n      >\n        <Link\n          variant=\"body1\"\n          color=\"inherit\"\n          to=\"/app\"\n          component={RouterLink}\n        >\n          Dashboard\n        </Link>\n        <Link\n          variant=\"body1\"\n          color=\"inherit\"\n          to=\"/app/management\"\n          component={RouterLink}\n        >\n          Management\n        </Link>\n        <Typography\n          variant=\"body1\"\n          color=\"textPrimary\"\n        >\n          Customers\n        </Typography>\n      </Breadcrumbs>\n      <Typography\n        variant=\"h3\"\n        color=\"textPrimary\"\n      >\n        Edit Customer\n      </Typography>\n    </div>\n  );\n}\n\nHeader.propTypes = {\n  className: PropTypes.string\n};\n\nexport default Header;\n","import React, {\n  useState,\n  useCallback,\n  useEffect\n} from 'react';\nimport {\n  Box,\n  Container,\n  makeStyles\n} from '@material-ui/core';\nimport axios from 'src/utils/axios';\nimport Page from 'src/components/Page';\nimport useIsMountedRef from 'src/hooks/useIsMountedRef';\nimport CustomerEditForm from './CustomerEditForm';\nimport Header from './Header';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    backgroundColor: theme.palette.background.dark,\n    minHeight: '100%',\n    paddingTop: theme.spacing(3),\n    paddingBottom: theme.spacing(3)\n  }\n}));\n\nfunction CustomerEditView() {\n  const classes = useStyles();\n  const isMountedRef = useIsMountedRef();\n  const [customer, setCustomer] = useState();\n\n  const getCustomer = useCallback(() => {\n    axios\n      .get('/api/management/customers/1')\n      .then((response) => {\n        if (isMountedRef.current) {\n          setCustomer(response.data.customer);\n        }\n      });\n  }, [isMountedRef]);\n\n  useEffect(() => {\n    getCustomer();\n  }, [getCustomer]);\n\n  if (!customer) {\n    return null;\n  }\n\n  return (\n    <Page\n      className={classes.root}\n      title=\"Customer Edit\"\n    >\n      <Container maxWidth=\"lg\">\n        <Header />\n        <Box mt={3}>\n          <CustomerEditForm customer={customer} />\n        </Box>\n      </Container>\n    </Page>\n  );\n}\n\nexport default CustomerEditView;\n"],"sourceRoot":""}